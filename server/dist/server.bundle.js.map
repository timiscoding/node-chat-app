{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"mongoose\"","webpack:///external \"passport\"","webpack:///external \"express\"","webpack:///external \"lodash\"","webpack:///external \"path\"","webpack:///./server/mailer.js","webpack:///external \"crypto\"","webpack:///external \"express-validator/check\"","webpack:///external \"express-session\"","webpack:///external \"body-parser\"","webpack:///./server/middleware.js","webpack:///external \"moment\"","webpack:///external \"bcrypt\"","webpack:///external \"request-promise\"","webpack:///external \"connect-ensure-login\"","webpack:///external \"connect-flash\"","webpack:///external \"email-templates\"","webpack:///external \"passport-google-oauth\"","webpack:///external \"passport-twitter\"","webpack:///external \"passport-facebook\"","webpack:///external \"passport-local\"","webpack:///external \"mongoose-beautiful-unique-validation\"","webpack:///external \"validator/lib/isEmail\"","webpack:///external \"es6-promisify\"","webpack:///external \"socket.io\"","webpack:///external \"http\"","webpack:///./server/models/user.model.js","webpack:///./server/models/emailVerifyToken.model.js","webpack:///./server/db.js","webpack:///./server/passport.js","webpack:///./server/utils/validation.js","webpack:///./server/utils/message.js","webpack:///./server/utils/users.js","webpack:///./server/models/room.model.js","webpack:///./server/models/message.model.js","webpack:///./server/socketEvent.js","webpack:///./server/controllers/userValidator.js","webpack:///./server/utils/helpers.js","webpack:///./server/controllers/user.controller.js","webpack:///./server/routes/user.router.js","webpack:///./server/controllers/auth.controller.js","webpack:///./server/routes/auth.router.js","webpack:///./server/routes/index.js","webpack:///./server/server.js","webpack:///./server/index.js","webpack:///external \"connect-mongo\""],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","email","email_templates__WEBPACK_IMPORTED_MODULE_0___default","a","message","from","transport","port","process","env","MAILER_PORT","host","MAILER_HOST","auth","user","MAILER_USERNAME","pass","MAILER_PASSWORD","juice","juiceResources","webResources","relativeTo","path__WEBPACK_IMPORTED_MODULE_1___default","join","__dirname","views","root","__webpack_exports__","sessionConfig","secret","SESSION_SECRET","resave","saveUninitialized","MongoStore","express_session__WEBPACK_IMPORTED_MODULE_4___default","store","mongooseConnection","mongoose__WEBPACK_IMPORTED_MODULE_6___default","connection","autoRemove","session","express__WEBPACK_IMPORTED_MODULE_0___default","static","body_parser__WEBPACK_IMPORTED_MODULE_2___default","json","urlencoded","extended","passport__WEBPACK_IMPORTED_MODULE_3___default","initialize","connect_flash__WEBPACK_IMPORTED_MODULE_5___default","userSchema","external_mongoose_default","Schema","username","type","String","required","unique","sparse","lowercase","trim","match","local","validate","isEmail_default","password","minlength","isVerified","Boolean","default","facebook","id","token","displayName","twitter","google","passwordResetToken","passwordResetExpires","Date","methods","isValidPassword","external_bcrypt_default","compare","this","types","accountsTotal","keys","toObject","reduce","total","f","includes","statics","hashPassword","plaintextPassword","Error","hash","genUniqueUsername","async","snakeCase","toLowerCase","replace","usernameRegex","RegExp","usernames","find","newUsername","external_lodash_default","length","plugin","external_mongoose_beautiful_unique_validation_default","model","emailVerifyTokenSchema","Types","ObjectId","ref","createdAt","expires","now","external_crypto_default","randomBytes","toString","findOneOrCreate","userId","Token","findOne","createToken","db","connect","MONGODB_URI","User","external_passport_default","use","external_passport_local_default","usernameField","passReqToCallback","req","done","local.email","err","getEmail","profile","emails","createAccount","provider","[object Object]","genOauthCb","accessToken","refreshTokenOrSecret","save","firstLogin","external_passport_facebook_default","clientID","FACEBOOK_APP_ID","clientSecret","FACEBOOK_APP_SECRET","callbackURL","DOMAIN","profileFields","external_passport_twitter_default","consumerKey","TWITTER_CONSUMER_KEY","consumerSecret","TWITTER_CONSUMER_SECRET","external_passport_google_oauth_","GOOGLE_APP_ID","GOOGLE_APP_SECRET","serializeUser","deserializeUser","findById","validation","string","generateMessage","text","external_moment_default","valueOf","users","instance","createInstance","room","mongoId","push","userToRemove","assign","getUser","filter","map","Set","getInstance","roomSchema","minLength","room_model","messageSchema","to","index","content","message_model","socketEvent_users","socketEvent_User","updateUserJoining","io","emit","rooms","getRoomList","createLocationMessage","socket","on","coords","latitude","longitude","url","generateLocationMessage","socketEvent","joinRoom","params","callback","roomName","passport","handshake","mongoUserId","messages","objectId","slice","_id","sort","populate","removeUser","addUser","getUserList","broadcast","createMessage","disconnect","_","userValidator_userSchema","in","isLength","errorMessage","options","min","custom","test","isEmail","normalizeEmail","all_lowercase","gmail_convert_googlemaildotcom","gmail_remove_dots","gmail_remove_subaddress","password-confirm","body","userValidatorSchema","fields","pick","validateUserForm","schema","view","check_","res","next","errors","formatWith","msg","isEmpty","flash","array","onlyFirstError","render","flashes","recaptchaKey","G_RECAPTCHA_SITE_KEY","catchAsyncError","fn","catch","user_controller_User","EmailVerifyToken","validateNewUser","validateEmail","validatePassword","user_controller","createOne","emailToken","getOne","send","updateOne","docFromId","deleteOne","signupForm","confirmEmail","findOneAndRemove","redirect","login","requestResend","resend","sendConfirmEmail","mailer","template","locals","confirmURL","protocol","hostname","forgotPasswordForm","forgotPassword","sendResetEmail","resetURL","resetPasswordForm","resetPassword","undefined","validResetToken","$gt","sendPasswordUpdatedEmail","validateHuman","failureView","method","uri","formData","G_RECAPTCHA_SECRET","response","external_request_promise_default","success","userRouter","external_express_default","Router","user_router_User","param","isValid","route","post","external_connect_ensure_login_","put","delete","auth_controller_User","auth_controller","loginForm","loginUser","authenticate","successReturnToOrRedirect","failureRedirect","failureFlash","successFlash","logoutUser","logout","genOauthLogin","config","authorize","scope","routes","info","error","linkedAccounts","entries","all","acc","linkable","authLocal","linkAccount","account","accountObj","doc","ret","newRet","__v","remove","unlinkAccount","status","linkLocalForm","validateProfile","updateProfile","preValidateProfile","validateProfilePassword","isLoggedIn","isAuthenticated","authRouter","forEach","authCb","routes_routes","title","validationErrors","e","server_routes","app","server","external_http_default","createServer","server_io","external_socket_io_default","console","set","middleware","log","external_es6_promisify_","PORT","listen"],"mappings":"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","file":"server.bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 28);\n","module.exports = require(\"mongoose\");","module.exports = require(\"passport\");","module.exports = require(\"express\");","module.exports = require(\"lodash\");","module.exports = require(\"path\");","import Email from 'email-templates';\nimport path from 'path';\n\nconst email = new Email({\n  message: {\n    from: 'no-reply@timiscoding.me',\n  },\n  // send: true, // uncomment to send emails in dev env\n  transport: {\n    port: process.env.MAILER_PORT,\n    host: process.env.MAILER_HOST,\n    auth: {\n      user: process.env.MAILER_USERNAME,\n      pass: process.env.MAILER_PASSWORD,\n    },\n  },\n  juice: true,\n  juiceResources: {\n    webResources: {\n      relativeTo: path.join(__dirname, '../views/emails/build'),\n    },\n  },\n  views: {\n    root: path.join(__dirname, '../views/emails'),\n  },\n});\n\nexport default email;\n","module.exports = require(\"crypto\");","module.exports = require(\"express-validator/check\");","module.exports = require(\"express-session\");","module.exports = require(\"body-parser\");","import express from 'express';\nimport path from 'path';\nimport bodyParser from 'body-parser';\nimport passport from 'passport';\nimport Session from 'express-session';\nimport flash from 'connect-flash';\nimport mongoose from 'mongoose';\n\nconst sessionConfig = {\n  secret: process.env.SESSION_SECRET,\n  resave: false,\n  saveUninitialized: false,\n};\n\nif (process.env.NODE_ENV === 'production') {\n  const MongoStore = require('connect-mongo')(Session);\n  sessionConfig.store = new MongoStore({\n    mongooseConnection: mongoose.connection,\n    autoRemove: 'native',\n  });\n} else if (process.env.NODE_ENV === 'development') {\n  const FileStore = require('session-file-store')(Session);\n  sessionConfig.store = new FileStore();\n}\n\nexport const session = Session(sessionConfig);\n\nexport default [\n  express.static(path.join(__dirname, '../public')),\n  bodyParser.json(),\n  bodyParser.urlencoded({ extended: true }),\n  session,\n  passport.initialize(),\n  passport.session(),\n  flash(),\n];\n","module.exports = require(\"moment\");","module.exports = require(\"bcrypt\");","module.exports = require(\"request-promise\");","module.exports = require(\"connect-ensure-login\");","module.exports = require(\"connect-flash\");","module.exports = require(\"email-templates\");","module.exports = require(\"passport-google-oauth\");","module.exports = require(\"passport-twitter\");","module.exports = require(\"passport-facebook\");","module.exports = require(\"passport-local\");","module.exports = require(\"mongoose-beautiful-unique-validation\");","module.exports = require(\"validator/lib/isEmail\");","module.exports = require(\"es6-promisify\");","module.exports = require(\"socket.io\");","module.exports = require(\"http\");","import mongoose from 'mongoose';\nimport bcrypt from 'bcrypt';\nimport isEmail from 'validator/lib/isEmail';\nimport beautifyUnique from 'mongoose-beautiful-unique-validation';\nimport _ from 'lodash';\n\nconst userSchema = new mongoose.Schema({\n  username: {\n    type: String,\n    required: 'Username is required',\n    unique: 'Username already taken',\n    sparse: true,\n    lowercase: true,\n    trim: true,\n    match: [/^[\\w-]+$/, \"Username must contain alphanumeric, '-', '_' characters only\"],\n  },\n  local: {\n    email: {\n      type: String,\n      unique: 'An account with email {VALUE} already exists',\n      sparse: true, // allows us to add documents without unique fields\n      trim: true,\n      lowercase: true,\n      validate: [isEmail, 'Email is not valid'],\n    },\n    password: {\n      type: String,\n      trim: true,\n      minlength: 5,\n    },\n    isVerified: {\n      type: Boolean,\n      default: false,\n    },\n  },\n  facebook: {\n    id: String,\n    token: String,\n    displayName: String,\n    email: String,\n  },\n  twitter: {\n    id: String,\n    token: String,\n    displayName: String,\n    username: String,\n  },\n  google: {\n    id: String,\n    token: String,\n    displayName: String,\n    email: String,\n  },\n  passwordResetToken: String,\n  passwordResetExpires: Date,\n});\n\nuserSchema.methods.isValidPassword = function isValidPassword(password) {\n  return bcrypt.compare(password, this.local.password);\n};\n\nconst types = ['twitter', 'google', 'facebook', 'local'];\nuserSchema.methods.accountsTotal = function accountsTotal() {\n  return Object.keys(this.toObject()).reduce((total, f) => {\n    if (types.includes(f)) {\n      if (f === 'local' || (f !== 'local' && this[f].token)) {\n        return total + 1;\n      }\n    }\n    return total;\n  }, 0);\n};\n\nuserSchema.statics.hashPassword = function hashPassword(plaintextPassword) {\n  if (!plaintextPassword) {\n    throw new Error('Password cannot be blank');\n  }\n  return bcrypt.hash(plaintextPassword, 12);\n};\n\nuserSchema.statics.genUniqueUsername = async function genUniqueUsername(name = 'anon') {\n  const snakeCase = name.toLowerCase().replace(/ /g, '_');\n  const usernameRegex = new RegExp(`^${snakeCase}\\d*$`);\n  const usernames = await this.find({ username: usernameRegex }, 'username');\n  let newUsername = snakeCase;\n  // find the first unique username with format username<incrementing number>\n  for (let i = 0; _.find(usernames, { username: newUsername }); i += 1) {\n    newUsername = snakeCase + (usernames.length + i);\n  }\n  return newUsername;\n};\n\n// if client tries creating a duplicate on a unique field, it will produce a low level\n// mongo db error. This plugin transforms that error into a mongoose validation error\n// that exists in an 'errors' object\nuserSchema.plugin(beautifyUnique);\n\nexport default mongoose.model('User', userSchema);\n","import mongoose from 'mongoose';\nimport crypto from 'crypto';\n\nconst emailVerifyTokenSchema = new mongoose.Schema({\n  user: {\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'User',\n    required: true,\n  },\n  createdAt: {\n    type: Date,\n    expires: '5 min',\n    default: Date.now,\n  },\n  token: {\n    type: String,\n    required: true,\n  },\n});\n\nconst token = () => crypto.randomBytes(20).toString('hex');\n\nemailVerifyTokenSchema.statics.findOneOrCreate = async function findOneOrCreate(userId) {\n  const Token = this;\n  if (userId) {\n    const foundToken = await Token.findOne({ user: userId });\n\n    return foundToken || Token.create({\n      user: userId,\n      token: token(),\n    });\n  }\n\n  return new Error('User id not given');\n};\n\nemailVerifyTokenSchema.statics.createToken = async function createToken(userId) {\n  const Token = this;\n  return Token.create({\n    user: userId,\n    token: token(),\n  });\n};\n\nexport default mongoose.model('EmailVerifyToken', emailVerifyTokenSchema);\n","import mongoose from 'mongoose';\nimport './models';\n\nconst connect = async () => mongoose.connect(process.env.MONGODB_URI);\n\nexport default connect;\n\n","import passport from 'passport';\nimport LocalStrategy from 'passport-local';\nimport FacebookStrategy from 'passport-facebook';\nimport TwitterStrategy from 'passport-twitter';\nimport { OAuth2Strategy as GoogleStrategy } from 'passport-google-oauth';\nimport mongoose from 'mongoose';\nimport _ from 'lodash';\n\nconst User = mongoose.model('User');\n\npassport.use(new LocalStrategy(\n  { usernameField: 'email', passReqToCallback: true },\n  async (req, email, password, done) => {\n    try {\n      const user = await User.findOne({ 'local.email': email });\n      if (!user) {\n        return done(null, false, { message: 'Email or password is invalid' });\n      }\n\n      const isValidPassword = await user.isValidPassword(password);\n      if (!isValidPassword) {\n        return done(null, false, { message: 'Email or password is invalid' });\n      }\n\n      if (!user.local.isVerified) {\n        return done(null, false, { message: 'The email has not been verified for this account. <a href=\"/resend\">Resend email confirmation</a>' });\n      }\n\n      /* user is either\n         a) already logged in via oauth and trying to link this local account so the user will be\n         injected into req.account\n         b) logging into their local account so the user will be injected into req.user */\n      return done(null, user);\n    } catch (err) {\n      return done(err, null, { message: 'Could not authenticate. Please try again' });\n    }\n  },\n));\n\nconst getEmail = profile => profile.emails && profile.emails.length && profile.emails[0].value;\nconst createAccount = async (provider, token, profile) => User.create({\n  [provider]: {\n    id: profile.id,\n    displayName: profile.displayName,\n    token,\n    email: getEmail(profile),\n  },\n  username: await User.genUniqueUsername(profile.username || profile.displayName),\n});\n\nconst genOauthCb = provider => async (req, accessToken, refreshTokenOrSecret, profile, done) => {\n  try {\n    let user = await User.findOne({ [`${provider}.id`]: profile.id });\n    if (!req.user) { // not already logged in\n      if (user) {\n        if (!user[provider].token) { // user unlinked this account but has logged in later\n          user[provider] = {\n            id: profile.id,\n            displayName: profile.displayName,\n            token: accessToken,\n            email: getEmail(profile),\n          };\n          user = await user.save();\n        }\n        return done(null, user);\n      }\n\n      user = await createAccount(provider, accessToken, profile);\n\n      /* when a user logs in for the first time, we need a way to inform the authController so that\n         they can send them to a profile page to let them change their username if they want.\n         firstLogin is my own custom prop that will be sent to the custom callback whenever\n         passport.auth(enticate|orize)() is called\n         */\n      return done(null, user, { firstLogin: true });\n    }\n    /* user already logged in and trying to link another account  */\n\n    /* if user tries to link an already linked account, just return the original user */\n    if (user) {\n      /* user previously unlinked account and now wants to relink it.\n        we must update the token and other profile info */\n      if (!user[provider].token) {\n        user = await createAccount(provider, accessToken, profile);\n      }\n      return done(null, user);\n    }\n\n    /* user linking an account they have never authorised before so lets create it first */\n    user = await createAccount(provider, accessToken, profile);\n\n    return done(null, user);\n  } catch (err) {\n    return done(err, false, { message: 'Could not authenticate. Please try again' });\n  }\n};\n\npassport.use(new FacebookStrategy(\n  {\n    clientID: process.env.FACEBOOK_APP_ID,\n    clientSecret: process.env.FACEBOOK_APP_SECRET,\n    callbackURL: `${process.env.DOMAIN}/auth/facebook/callback`,\n    profileFields: ['email', 'displayName'],\n    passReqToCallback: true,\n  },\n  genOauthCb('facebook'),\n));\n\npassport.use(new TwitterStrategy(\n  {\n    consumerKey: process.env.TWITTER_CONSUMER_KEY,\n    consumerSecret: process.env.TWITTER_CONSUMER_SECRET,\n    callbackURL: `${process.env.DOMAIN}/auth/twitter/callback`,\n    passReqToCallback: true,\n  },\n  genOauthCb('twitter'),\n));\n\npassport.use(new GoogleStrategy(\n  {\n    clientID: process.env.GOOGLE_APP_ID,\n    clientSecret: process.env.GOOGLE_APP_SECRET,\n    callbackURL: `${process.env.DOMAIN}/auth/google/callback`,\n    passReqToCallback: true,\n  },\n  genOauthCb('google'),\n));\n\npassport.serializeUser((user, done) => done(null, user.id));\npassport.deserializeUser(async (id, done) => {\n  try {\n    const user = await User.findById(id);\n    return done(null, user);\n  } catch (err) {\n    return done(err);\n  }\n});\n","const isRealString = string => typeof string === 'string' && string.trim().length > 0;\n\nexport default isRealString;\n","import moment from 'moment';\n\nexport const generateMessage = (from, text) => ({\n  from,\n  text,\n  createdAt: moment().valueOf(),\n});\n\nexport const generateLocationMessage = (from, latitude, longitude) => ({\n  from,\n  url: `https://www.google.com/maps?q=${latitude},${longitude}`,\n  createdAt: moment().valueOf(),\n});\n","class UsersClass {\n  constructor() {\n    this.users = [];\n  }\n\n  addUser(id, name, room, mongoId) {\n    const user = { id, name, room, mongoId };\n    this.users.push(user);\n    return user;\n  }\n\n  removeUser(id) {\n    const userToRemove = Object.assign({}, this.getUser({ id }));\n\n    if (userToRemove) {\n      this.users = this.users.filter(user => user.id !== userToRemove.id);\n    }\n\n    return userToRemove;\n  }\n\n  getUser({ id, name }) {\n    return this.users.find(user => user.id === id || user.name === name);\n  }\n\n  getUserList(room) {\n    const users = this.users.filter(user => user.room === room);\n    const namesArray = users.map(user => user.name);\n\n    return namesArray;\n  }\n\n  getRoomList() {\n    const rooms = new Set(this.users.map(user => user.room));\n    return [...rooms];\n  }\n}\n\nconst Users = (() => {\n  let instance;\n\n  const createInstance = () => new UsersClass();\n\n  return {\n    getInstance() {\n      if (!instance) {\n        instance = createInstance();\n      }\n      return instance;\n    },\n  };\n})();\n\nexport default Users;\nexport { UsersClass };\n","import mongoose from 'mongoose';\n\nconst roomSchema = new mongoose.Schema({\n  name: {\n    type: String,\n    required: true,\n    minLength: 1,\n    trim: true,\n  },\n});\n\nexport default mongoose.model('Room', roomSchema);\n","import mongoose from 'mongoose';\n\nconst messageSchema = new mongoose.Schema({\n  createdAt: {\n    type: Date,\n    default: Date.now,\n  },\n  to: {\n    type: String,\n    index: true,\n    required: true,\n  },\n  from: {\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'User',\n    required: true,\n  },\n  content: {\n    type: String,\n    trim: true,\n    minLength: 1,\n    required: true,\n  },\n});\n\nexport default mongoose.model('Message', messageSchema);\n","import mongoose from 'mongoose';\n\nimport isRealString from './utils/validation';\nimport { generateMessage, generateLocationMessage } from './utils/message';\nimport Users from './utils/users';\nimport Room from './models/room.model';\nimport Message from './models/message.model';\n\nconst users = Users.getInstance();\nconst User = mongoose.model('User');\n\n// update room list for people joining a room\nconst updateUserJoining = (io) => {\n  io.emit('updateRoomList', { rooms: users.getRoomList() });\n};\n\nconst joinRoom = (socket, io) => socket.on('join', async (params, callback) => {\n  if (!isRealString(params.room)) {\n    return callback('Room name required!');\n  }\n\n  const roomName = params.room.trim().toLowerCase();\n  socket.join(roomName);\n\n  const { passport } = socket.handshake.session;\n  let name, mongoUserId;\n  if (passport && passport.user) {\n    try {\n      const user = await User.findById(passport.user);\n      name = user.username;\n      mongoUserId = user.id;\n    } catch (err) {\n      return callback('Could not retrieve user information');\n    }\n  } else {\n    const objectId = new mongoose.Types.ObjectId;\n    name = `guest-${objectId.toString().slice(-4)}`;\n    await User.create({ username: name, _id: objectId });\n    mongoUserId = objectId.toString();\n  }\n\n  try {\n    const room = await Room.findOne({ name: roomName });\n\n    if (!room) {\n      await Room.create({ name: roomName });\n    }\n  } catch (err) {\n    return callback('Could not create room');\n  }\n\n  let messages;\n  try {\n    messages = await Message\n      .find({ to: roomName }, { _id: 0 }, { sort: { createdAt: 1 }})\n      .populate('from', { username: 1, _id: 0 });\n  } catch (err) {\n    return callback('Could not get message history');\n  }\n\n  users.removeUser(socket.id);\n  users.addUser(socket.id, name, roomName, mongoUserId);\n  io.to(roomName).emit('updateUserList', users.getUserList(roomName));\n  socket.emit('newMessage', generateMessage('Admin', `Welcome to the room ${roomName}!`));\n  socket.broadcast.to(roomName).emit('newMessage', generateMessage('Admin', `${name} joined the chat`));\n\n  updateUserJoining(io);\n  return callback(null, messages);\n});\n\nconst createMessage = (socket, io) => socket.on('createMessage', async (message, callback) => {\n  const user = users.getUser({ id: socket.id });\n\n  if (user && isRealString(message.text)) {\n    try {\n      await Message.create({ from: user.mongoId, to: user.room, content: message.text });\n    } catch (err) {\n      return callback('Error persisting message to db');\n    }\n\n    io.to(user.room).emit('newMessage', generateMessage(user.name, message.text));\n  }\n  callback();\n});\n\nconst createLocationMessage = (socket, io) => socket.on('createLocationMessage', (coords) => {\n  const user = users.getUser({ id: socket.id });\n\n  if (user) {\n    io.to(user.room).emit('newLocationMessage', generateLocationMessage(user.name, coords.latitude, coords.longitude));\n  }\n});\n\nconst disconnect = (socket, io) => socket.on('disconnect', () => {\n  const user = users.removeUser(socket.id);\n\n  io.to(user.room).emit('updateUserList', users.getUserList(user.room));\n  io.to(user.room).emit('newMessage', generateMessage('Admin', `${user.name} has left`));\n  updateUserJoining(io);\n});\n\nconst getRoomList = socket => socket.on('getRoomList', (_, callback) => {\n  callback({ rooms: users.getRoomList() });\n});\n\nexport default (socket, io) => ({\n  joinRoom: joinRoom(socket, io),\n  createMessage: createMessage(socket, io),\n  createLocationMessage: createLocationMessage(socket, io),\n  disconnect: disconnect(socket, io),\n  getRoomList: getRoomList(socket, io),\n});\n","import _ from 'lodash';\nimport { validationResult, checkSchema } from 'express-validator/check';\n\nconst userSchema = {\n  username: {\n    in: 'body',\n    isLength: {\n      errorMessage: 'Username must not be empty',\n      options: { min: 1 },\n    },\n    custom: {\n      options: (value) => {\n        const guestRe = /^guest-\\w+$/i;\n        const validUserRe = /^[\\w-]+$/;\n        if (!validUserRe.test(value)) {\n          throw new Error(\"Username must be letters, numbers, '_', ' -' only\");\n        } else if (guestRe.test(value)) {\n          throw new Error(\"Usernames beginning with 'guest-' are reserved for unregistered users\");\n        }\n        return true;\n      },\n    },\n    trim: true,\n  },\n  email: {\n    in: 'body',\n    isEmail: {\n      errorMessage: 'Email address is not valid',\n    },\n    trim: true,\n    normalizeEmail: {\n      options: {\n        all_lowercase: true,\n        gmail_convert_googlemaildotcom: true,\n        gmail_remove_dots: true,\n        gmail_remove_subaddress: true,\n      },\n    },\n  },\n  password: {\n    in: 'body',\n    isLength: {\n      errorMessage: 'Password must be at least 5 characters long',\n      options: { min: 5 },\n    },\n    trim: true,\n  },\n  'password-confirm': {\n    in: 'body',\n    custom: {\n      options: (value, { req }) => {\n        if (req.body.password !== value) {\n          throw new Error('Password confirmation does not match password field');\n        }\n        return true;\n      },\n    },\n  },\n};\n\nconst userValidatorSchema = (...fields) =>\n  (fields.length ? _.pick(userSchema, fields) : userSchema);\n\nconst validateUserForm = (schema, view) => [\n  checkSchema(schema),\n  (req, res, next) => {\n    const errors = validationResult(req).formatWith(({ msg }) => msg);\n    if (errors.isEmpty()) {\n      next();\n    } else {\n      req.flash('error', errors.array({ onlyFirstError: true }));\n      res.render(view, {\n        body: req.body,\n        flashes: req.flash(),\n        recaptchaKey: process.env.G_RECAPTCHA_SITE_KEY });\n    }\n  },\n];\n\nexport { userValidatorSchema, validateUserForm };\n","export const catchAsyncError = fn => (req, res, next) => fn(req, res, next).catch(next);\n","import mongoose from 'mongoose';\nimport crypto from 'crypto';\nimport rp from 'request-promise';\n\nimport { userValidatorSchema, validateUserForm } from './userValidator';\nimport { catchAsyncError } from '../utils/helpers';\nimport mailer from '../mailer';\n\nconst User = mongoose.model('User');\nconst EmailVerifyToken = mongoose.model('EmailVerifyToken');\n\nconst signupForm = (req, res) => {\n  res.render('signup', { recaptchaKey: process.env.G_RECAPTCHA_SITE_KEY });\n};\n\nconst validateNewUser = validateUserForm(userValidatorSchema(), 'signup');\n\nconst validateHuman = failureView => async (req, res, next) => {\n  const options = {\n    method: 'POST',\n    uri: 'https://www.google.com/recaptcha/api/siteverify',\n    formData: {\n      secret: process.env.G_RECAPTCHA_SECRET,\n      response: req.body['g-recaptcha-response'],\n    },\n    json: true,\n  };\n\n  try {\n    const captchaRes = await rp(options);\n\n    if (captchaRes.success) {\n      return next();\n    }\n  } catch (err) {\n    return next(err);\n  }\n\n  req.flash('error', 'reCaptcha failed. Please try again');\n  return res.render(failureView, {\n    body: req.body,\n    flashes: req.flash(),\n    recaptchaKey: process.env.G_RECAPTCHA_SITE_KEY,\n  });\n};\n\nconst createOne = async (req, res, next) => {\n  const { email, password, username } = req.body;\n  try {\n    const user = await User.create({\n      local: { email, password: await User.hashPassword(password) },\n      username,\n    });\n\n    req.emailToken = await EmailVerifyToken.createToken(user.id);\n    next();\n  } catch (err) {\n    if (err.errors) {\n      const keys = Object.keys(err.errors);\n      const flashes = keys.map(key => err.errors[key].message);\n      req.flash('error', flashes);\n      res.render('signup', { body: { username, email }, flashes: req.flash() });\n    } else {\n      next(err);\n    }\n  }\n};\n\nconst sendConfirmEmail = (req, res) => {\n  const { email, username } = req.body;\n\n  mailer.send({\n    template: 'verifyEmail',\n    message: {\n      to: email,\n    },\n    locals: {\n      name: username,\n      confirmURL: `${req.protocol}://${req.hostname}/confirm/${req.emailToken.token}`,\n    },\n  });\n\n  req.flash('info', `An email has been sent to ${email}. Please confirm your email to complete sign up.`);\n  res.redirect('/');\n};\n\nconst confirmEmail = async (req, res) => {\n  const token = await EmailVerifyToken.findOneAndRemove({ token: req.params.token }).populate('user');\n  if (!token) {\n    req.flash('error', `Email verification invalid. Either the link does not match the one provided\n      in the email or the link may have expired. <a href=\"/resend\">Resend email confirmation</a>`);\n    return res.redirect('/');\n  }\n\n  const { user } = token;\n  user.local.isVerified = true;\n  await user.save();\n  await req.login(user);\n  req.flash('success', 'Your email has been confirmed. You are now logged in');\n  return res.redirect('/');\n};\n\n/* Resend confirmation email */\n\nconst requestResend = (req, res) => {\n  res.render('confirmEmail', { recaptchaKey: process.env.G_RECAPTCHA_SITE_KEY });\n};\n\nconst validateEmail = validateUserForm(userValidatorSchema('email'), 'confirmEmail');\n\nconst resend = async (req, res, next) => {\n  const user = await User.findOne({ 'local.email': req.body.email });\n\n  if (!user || !user.local) {\n    req.flash('info', 'An account with this email does not exist');\n    return res.render('confirmEmail', { body: req.body, flashes: req.flash() });\n  }\n\n  if (user.local && user.local.isVerified) {\n    req.flash('info', 'The email for this account is already confirmed');\n    return res.redirect('/');\n  }\n\n  req.emailToken = await EmailVerifyToken.findOneOrCreate(user.id);\n  req.body.username = user.username;\n  return next();\n};\n\n/* Reset password */\n\nconst forgotPasswordForm = (req, res) => {\n  res.render('forgotPassword', { recaptchaKey: process.env.G_RECAPTCHA_SITE_KEY });\n};\n\nconst forgotPassword = async (req, res, next) => {\n  const user = await User.findOne({ 'local.email': req.body.email });\n\n  if (!user || !user.local) {\n    req.flash('info', 'An account with this email does not exist');\n    return res.render('forgotPassword', { body: req.body, flashes: req.flash() });\n  }\n\n  user.passwordResetToken = crypto.randomBytes(20).toString('hex');\n  user.passwordResetExpires = Date.now() + 3600000;\n  await user.save();\n  req.emailToken = user.passwordResetToken;\n  req.body.username = user.username;\n  return next();\n};\n\nconst sendResetEmail = (req, res) => {\n  const { email, username } = req.body;\n\n  mailer.send({\n    template: 'resetPassword',\n    message: {\n      to: email,\n    },\n    locals: {\n      name: username,\n      resetURL: `${req.protocol}://${req.hostname}/reset/${req.emailToken}`,\n    },\n  });\n\n  req.flash('info', `An email has been sent to ${email} with instructions to reset your password.`);\n  res.redirect('/');\n};\n\nconst validResetToken = async (req, res, next) => {\n  const user = await User.findOne({\n    passwordResetToken: req.params.token,\n    passwordResetExpires: { $gt: Date.now() },\n  });\n  if (!user) {\n    req.flash('error', 'This password reset is invalid or expired. Please request a new one');\n    return res.redirect('/forgot');\n  }\n  req.user = user;\n  return next();\n};\n\nconst resetPasswordForm = async (req, res) => {\n  res.render('resetPassword');\n};\n\nconst validatePassword = validateUserForm(userValidatorSchema('password', 'password-confirm'), 'resetPassword');\n\nconst resetPassword = async (req, res, next) => {\n  const { user } = req;\n\n  user.local.password = await User.hashPassword(req.body.password);\n  user.passwordResetExpires = undefined;\n  user.passwordResetToken = undefined;\n  await user.save();\n  await req.login(user);\n  next();\n};\n\nconst sendPasswordUpdatedEmail = async (req, res) => {\n  const { local: { email }, username } = req.user;\n\n  mailer.send({\n    template: 'updatedPassword',\n    message: {\n      to: email,\n    },\n    locals: {\n      name: username,\n    },\n  });\n\n  req.flash('success', 'Password has been updated');\n  res.redirect('/');\n};\n\nconst getOne = async (req, res) => {\n  const user = await User.findById(req.user.id);\n  res.send(`get user\\n ${user}`);\n};\n\nconst updateOne = (req, res) => {\n  res.send(`update user\\n ${req.docFromId}`);\n};\n\nconst deleteOne = (req, res) => {\n  res.send(`delete user\\n ${req.docFromId}`);\n};\n\nexport default {\n  createOne: catchAsyncError(createOne),\n  getOne: catchAsyncError(getOne),\n  updateOne: catchAsyncError(updateOne),\n  deleteOne: catchAsyncError(deleteOne),\n  signupForm,\n  validateNewUser,\n  confirmEmail: catchAsyncError(confirmEmail),\n  requestResend,\n  validateEmail,\n  resend,\n  sendConfirmEmail,\n  forgotPasswordForm,\n  forgotPassword: catchAsyncError(forgotPassword),\n  sendResetEmail,\n  resetPasswordForm,\n  validatePassword,\n  resetPassword: catchAsyncError(resetPassword),\n  validResetToken: catchAsyncError(validResetToken),\n  sendPasswordUpdatedEmail: catchAsyncError(sendPasswordUpdatedEmail),\n  validateHuman,\n};\n","import express from 'express';\nimport { ensureLoggedIn } from 'connect-ensure-login';\nimport mongoose from 'mongoose';\nimport userController from '../controllers/user.controller';\n\nexport const userRouter = express.Router();\nconst User = mongoose.model('User');\n\nuserRouter.param('id', async (req, res, next, id) => {\n  try {\n    if (!mongoose.Types.ObjectId.isValid(id)) {\n      throw new Error('Invalid user id');\n    }\n    const user = await User.findById(id);\n    if (!user) {\n      throw new Error('No user found');\n    } else {\n      req.docFromId = user;\n      next();\n    }\n  } catch (err) {\n    next(err.message);\n  }\n});\n\nuserRouter.route('/signup')\n  .get(userController.signupForm)\n  .post(\n    userController.validateNewUser,\n    userController.validateHuman('signup'),\n    userController.createOne,\n    userController.sendConfirmEmail,\n  );\n\nuserRouter.route('/user/:id')\n  .get(ensureLoggedIn(), userController.getOne)\n  .put(userController.updateOne)\n  .delete(userController.deleteOne);\n\nuserRouter.route('/resend')\n  .get(userController.requestResend)\n  .post(userController.validateEmail, userController.validateHuman('confirmEmail'), userController.resend, userController.sendConfirmEmail);\nuserRouter.get('/confirm/:token', userController.confirmEmail);\n\nuserRouter.route('/forgot')\n  .get(userController.forgotPasswordForm)\n  .post(userController.validateEmail, userController.validateHuman('forgotPassword'), userController.forgotPassword, userController.sendResetEmail);\n\nuserRouter.route('/reset/:token')\n  .get(userController.validResetToken, userController.resetPasswordForm)\n  .post(\n    userController.validResetToken,\n    userController.validatePassword,\n    userController.resetPassword,\n    userController.sendPasswordUpdatedEmail,\n  );\n","import passport from 'passport';\nimport mongoose from 'mongoose';\n\nimport { userValidatorSchema, validateUserForm } from './userValidator';\n\nconst User = mongoose.model('User');\n\nconst loginForm = (req, res) => res.render('login');\n\n// logs in a user\nconst loginUser = passport.authenticate('local', {\n  successReturnToOrRedirect: '/',\n  failureRedirect: '/login',\n  failureFlash: true,\n  successFlash: 'You have logged in',\n});\n\nconst logoutUser = (req, res) => {\n  req.logout();\n  req.flash('info', 'You have logged out');\n  res.redirect('/');\n};\n\n// checks credentials but does not log them in\nconst authLocal = passport.authorize('local', {\n  failureRedirect: '/link/local',\n  failureFlash: 'Email or password is invalid',\n});\n\nconst linkLocalForm = (req, res) => res.render('link_local');\n\nconst genOauthLogin = (provider, config = {}) => ({\n  auth(req, res, next) {\n    const fn = req.user ? passport.authorize : passport.authenticate;\n    return fn.call(passport, provider, config.scope && { scope: config.scope })(req, res, next);\n  },\n  authCb(req, res, next) {\n    const fn = req.user ? passport.authorize : passport.authenticate;\n    const routes = req.user ?\n      {\n        failureRedirect: '/profile',\n        failureFlash: `${provider} account was not linked`,\n      } :\n      (err, user, info) => {\n        if (err) { return next(err); }\n        if (!user) {\n          req.flash('error', `Permission to login via ${provider} was denied`);\n          return res.redirect('/login');\n        }\n\n        return req.login(user, (error) => {\n          if (error) { return next(error); }\n          req.flash('success', `You have logged in, ${user[provider].displayName || user[provider].username}`);\n          if (info.firstLogin) { return res.redirect('/profile'); }\n          return res.redirect('/');\n        });\n      };\n    return fn.call(passport, provider, routes)(req, res, next);\n  },\n});\n\nconst linkAccount = async (req, res, next) => {\n  const { user, account } = req;\n\n  // user who has already logged in has authorised another account so we need to link them\n  if (user && account) {\n    const accountObj = account.toObject({\n      transform(doc, ret) {\n        const newRet = Object.assign({}, ret);\n        delete newRet.__v;\n        delete newRet._id;\n        return newRet;\n      },\n    });\n    if (accountObj.local) {\n      /* if req.user is a social account and they try to link to local, then we must delete the\n          local account otherwise there will be a duplicate in the db when we try to add the local\n          info to the social account. Since the user model doesn't allow duplicate emails, it will\n          throw an error if we didn't do this */\n      await User.deleteOne({ 'local.email': accountObj.local.email });\n    }\n    // merge accounts but preserve original username\n    Object.assign(user, accountObj, { username: user.username });\n    await user.save();\n    await account.remove();\n    req.flash('success', 'Accounts have been linked');\n    return res.redirect('/profile');\n  }\n  return next();\n};\n\nconst unlinkAccount = async (req, res, next) => {\n  const type = req.params.account;\n  const types = ['twitter', 'google', 'facebook', 'local'];\n  const { user } = req;\n  if (!types.includes(type)) {\n    const err = new Error('Unknown account type');\n    err.status = 400;\n    return next(err);\n  }\n\n  if (user.accountsTotal === 1) {\n    req.flash('error', 'Unable to unlink solo account');\n    return res.redirect('/profile');\n  }\n\n  if (type === 'local') {\n    const local = Object.assign({}, user.local);\n    user.local = undefined;\n    await user.save();\n    await User.create({ local, username: await User.genUniqueUsername() });\n  } else {\n    user[type].token = undefined;\n    await user.save();\n  }\n  req.flash('success', 'Account has been unlinked');\n  return res.redirect('/profile');\n};\n\nconst profile = (req, res) => {\n  const { user } = req;\n\n  const linkedAccounts = Object.entries(user.toObject()).reduce((all, [type, acc]) => {\n    if ((type === 'local' && acc.email) || acc.token) {\n      all[type] = acc.email || acc.displayName;\n    }\n    return all;\n  }, {});\n\n  const linkable = ['local', 'twitter', 'google', 'facebook']\n    .filter(type => !linkedAccounts[type]);\n\n  res.render('profile', {\n    body: { username: req.user.username, email: req.user.local.email },\n    linkedAccounts,\n    linkable,\n  });\n};\n\nconst preValidateProfile = (req, res, next) => {\n  if (req.body.password) {\n    return next('route');\n  }\n  return next();\n};\n\nconst validateProfile = validateUserForm(userValidatorSchema('username', 'email'), 'profile');\nconst validateProfilePassword = validateUserForm(userValidatorSchema('username', 'email', 'password', 'password-confirm'), 'profile');\n\nconst updateProfile = async (req, res) => {\n  const { username, email, password } = req.body;\n  if (username !== req.user.username) {\n    req.user.username = username;\n  }\n\n  if (req.user.local && email !== req.user.local.email) {\n    req.user.local.email = email;\n  }\n\n  if (password) {\n    req.user.local.password = await User.hashPassword(password);\n  }\n\n  await req.user.save();\n  req.flash('success', 'Account updated');\n  res.redirect('/profile');\n};\n\nexport default {\n  loginForm,\n  loginUser,\n  logoutUser,\n  genOauthLogin,\n  profile,\n  authLocal,\n  linkAccount,\n  unlinkAccount,\n  linkLocalForm,\n  validateProfile,\n  updateProfile,\n  preValidateProfile,\n  validateProfilePassword,\n};\n","import express from 'express';\n\nimport authController from '../controllers/auth.controller';\nimport { catchAsyncError } from '../utils/helpers';\n\nconst isLoggedIn = (req, res, next) => {\n  if (req.isAuthenticated()) {\n    next();\n  } else {\n    res.redirect('/');\n  }\n};\n\nexport const authRouter = express.Router();\n\nauthRouter.get('/login', authController.loginForm);\nauthRouter.post('/login', authController.loginUser);\nauthRouter.get('/logout', isLoggedIn, authController.logoutUser);\nauthRouter.get('/profile', isLoggedIn, authController.profile);\nauthRouter.post('/profile', isLoggedIn, authController.preValidateProfile, authController.validateProfile, catchAsyncError(authController.updateProfile));\nauthRouter.post('/profile', authController.validateProfilePassword, catchAsyncError(authController.updateProfile));\nauthRouter.get('/link/local', isLoggedIn, authController.linkLocalForm);\nauthRouter.post('/link/local', isLoggedIn, authController.authLocal, catchAsyncError(authController.linkAccount));\nauthRouter.post('/unlink/:account', isLoggedIn, catchAsyncError(authController.unlinkAccount));\n\n[\n  {\n    provider: 'facebook',\n    config: {\n      scope: 'email',\n    },\n  },\n  { provider: 'twitter' },\n  {\n    provider: 'google',\n    config: {\n      scope: 'https://www.googleapis.com/auth/userinfo.profile',\n    },\n  },\n].forEach(({ provider, config }) => {\n  const { auth, authCb } = authController.genOauthLogin(provider, config);\n  authRouter.get(`/auth/${provider}`, auth);\n  authRouter.get(`/auth/${provider}/callback`, authCb, catchAsyncError(authController.linkAccount));\n  authRouter.get(`/link/${provider}`, isLoggedIn, auth);\n});\n","import express from 'express';\nimport { userRouter } from './user.router';\nimport { authRouter } from './auth.router';\n\nconst routes = express.Router();\n\nroutes.use('/', authRouter);\nroutes.use('/', userRouter);\n\nroutes.get('/', (req, res) => {\n  res.render('index', { title: 'Join' });\n});\n\nroutes.post('/chat', (req, res) => {\n  res.render('chat', { title: 'Chat' });\n});\n\n// handle mongoose validation errors\nroutes.use((err, req, res, next) => {\n  if (!err.errors) {\n    return next(err);\n  }\n\n  const validationErrors = Object.keys(err.errors);\n\n  if (validationErrors.length > 0) {\n    validationErrors.forEach(e => req.flash('error', err.errors[e].message));\n  }\n  return res.redirect('back');\n});\n\nroutes.use((err, req, res, next) => { // eslint-disable-line no-unused-vars\n  const status = err.status || 500;\n\n  res.status(status).render('error', {\n    status,\n    message: process.env.NODE_ENV === 'development' ? err : err.message,\n  });\n});\n\nexport default routes;\n","/* eslint-disable no-console */\n\nimport express from 'express';\nimport http from 'http';\nimport socketIO from 'socket.io';\nimport { promisify } from 'es6-promisify';\n\nimport connect from './db';\nimport './passport';\nimport './mailer';\nimport genSocketEvents from './socketEvent';\nimport { default as globalMiddleware, session } from './middleware';\nimport routes from './routes';\n\nconst app = express();\nconst server = http.createServer(app);\nconst io = socketIO(server);\nconnect().catch(err => console.error('Could not connect to DB', err.message));\n\napp.set('view engine', 'pug');\n\n/* without this, express incorrectly gets wrong header info because it thinks requests are coming\n   from nginx so for eg. req.protocol would be 'http' when it should be 'https' */\napp.set('trust proxy', true);\n\napp.use(globalMiddleware);\n\nio.use((socket, next) => {\n  session(socket.handshake, {}, next);\n});\n\nio.on('connection', (socket) => {\n  console.log('New user connected');\n  genSocketEvents(socket, io);\n});\n\n// convert callback based methods to use promises\napp.use((req, res, next) => {\n  req.login = promisify(req.login.bind(req));\n  next();\n});\n\n// pass variables to all templates\napp.use((req, res, next) => {\n  const flashes = req.flash();\n  res.locals.user = req.user;\n  res.locals.flashes = Object.keys(flashes).length > 0 ? flashes : undefined;\n  next();\n});\napp.use('/', routes);\n\nexport { server as default, io };\n","/* eslint-disable no-console */\n\nimport server, { io } from './server';\n\nconst port = process.env.PORT || 4000;\nlet cServer = server;\nlet cIo = io;\n\nif (module.hot) {\n  module.hot.accept('./server', () => {\n    console.log('Re-attaching event listeners to updated server module');\n    cServer.close();\n    server.listen(port);\n    cServer = server;\n\n    cIo.close();\n    io.attach(cServer);\n    cIo = io;\n  });\n}\n\nserver.listen(port, () => {\n  console.log(`Server started on port ${port}`);\n});\n","module.exports = require(\"connect-mongo\");"],"sourceRoot":""}