{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"passport\"","webpack:///external \"mongoose\"","webpack:///external \"express\"","webpack:///external \"hbs\"","webpack:///external \"path\"","webpack:///./server/server.js","webpack:///external \"express-validator/check\"","webpack:///external \"body-parser\"","webpack:///external \"moment\"","webpack:///external \"bcrypt\"","webpack:///external \"handlebars\"","webpack:///./server/models/user.model.js","webpack:///./server/db.js","webpack:///./server/utils/validation.js","webpack:///./server/utils/message.js","webpack:///./server/socketEvent.js","webpack:///./server/utils/users.js","webpack:///./server/utils/helpers.js","webpack:///./server/controllers/user.controller.js","webpack:///./server/routes/user.router.js","webpack:///./server/controllers/auth.controller.js","webpack:///./server/routes/auth.router.js","webpack:///./server/routes/index.js","webpack:///external \"connect-ensure-login\"","webpack:///external \"connect-flash\"","webpack:///external \"express-session\"","webpack:///./server/middleware.js","webpack:///external \"lodash\"","webpack:///external \"passport-google-oauth\"","webpack:///external \"passport-twitter\"","webpack:///external \"passport-facebook\"","webpack:///external \"passport-local\"","webpack:///external \"mongoose-beautiful-unique-validation\"","webpack:///external \"validator/lib/isEmail\"","webpack:///external \"hbs-utils\"","webpack:///external \"socket.io\"","webpack:///external \"http\"","webpack:///./server/passport.js","webpack:///./server/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","_routes__WEBPACK_IMPORTED_MODULE_11__","app","express__WEBPACK_IMPORTED_MODULE_0___default","server","http__WEBPACK_IMPORTED_MODULE_1___default","a","createServer","io","socket_io__WEBPACK_IMPORTED_MODULE_2___default","_db__WEBPACK_IMPORTED_MODULE_7__","catch","err","console","error","message","hbs__WEBPACK_IMPORTED_MODULE_3___default","localsAsTemplateData","registerHelper","obj","JSON","stringify","accounts","out","entries","forEach","type","acc","email","token","username","displayName","handlebars__WEBPACK_IMPORTED_MODULE_6___default","SafeString","linkable","filter","map","join","hbsUtils","hbs_utils__WEBPACK_IMPORTED_MODULE_4___default","registerPartials","hbsRegisterPartials","path__WEBPACK_IMPORTED_MODULE_5___default","__dirname","set","use","_middleware__WEBPACK_IMPORTED_MODULE_10__","on","socket","log","_socketEvent__WEBPACK_IMPORTED_MODULE_9__","req","res","next","flashes","flash","locals","user","toObject","[object Object]","doc","ret","newRet","assign","__v","_id","local","keys","length","id","undefined","userSchema","external_mongoose_default","Schema","String","unique","sparse","trim","lowercase","validate","isEmail_default","password","minlength","match","facebook","twitter","google","methods","isValidPassword","external_bcrypt_default","compare","this","statics","hashPassword","plaintextPassword","Error","hash","plugin","external_mongoose_beautiful_unique_validation_default","model","__webpack_exports__","async","connect","process","env","DB_URL","validation","string","generateMessage","from","text","createdAt","external_moment_default","valueOf","socketEvent_users","instance","createInstance","users","room","push","userToRemove","getUser","find","Set","getInstance","updateUserJoining","emit","rooms","getRoomList","createLocationMessage","coords","to","latitude","longitude","url","generateLocationMessage","joinRoom","params","callback","toLowerCase","removeUser","addUser","getUserList","broadcast","createMessage","disconnect","_","catchAsyncError","fn","User","validateNewUser","check_","in","isLength","errorMessage","options","min","matches","isEmail","normalizeEmail","all_lowercase","gmail_convert_googlemaildotcom","gmail_remove_dots","gmail_remove_subaddress","password-confirm","custom","body","errors","formatWith","msg","isEmpty","array","onlyFirstError","render","user_controller","createOne","save","login","redirect","getOne","findById","send","updateOne","docFromId","deleteOne","signupForm","userRouter","external_express_default","Router","user_router_User","param","Types","ObjectId","isValid","route","post","external_connect_ensure_login_","put","delete","auth_controller_User","auth_controller","loginForm","loginUser","external_passport_default","authenticate","successReturnToOrRedirect","failureRedirect","failureFlash","successFlash","logoutUser","logout","genOauthLogin","provider","config","auth","authorize","scope","routes","info","firstLogin","profile","authLocal","linkAccount","account","accountObj","local.email","remove","unlinkAccount","isLoggedIn","isAuthenticated","authRouter","authCb","routes_routes","title","validationErrors","e","status","static","path__WEBPACK_IMPORTED_MODULE_1___default","body_parser__WEBPACK_IMPORTED_MODULE_2___default","json","urlencoded","extended","express_session__WEBPACK_IMPORTED_MODULE_4___default","secret","SESSION_SECRET","resave","saveUninitialized","passport__WEBPACK_IMPORTED_MODULE_3___default","initialize","session","connect_flash__WEBPACK_IMPORTED_MODULE_5___default","mongoose__WEBPACK_IMPORTED_MODULE_5___default","passport__WEBPACK_IMPORTED_MODULE_0___default","passport_local__WEBPACK_IMPORTED_MODULE_1___default","usernameField","passReqToCallback","done","findOne","genUniqueUsername","snakeCase","replace","usernameRegex","RegExp","usernames","newUsername","lodash__WEBPACK_IMPORTED_MODULE_6___default","getEmail","emails","genOauthCb","accessToken","refreshTokenOrSecret","passport_facebook__WEBPACK_IMPORTED_MODULE_2___default","clientID","FACEBOOK_APP_ID","clientSecret","FACEBOOK_APP_SECRET","callbackURL","DOMAIN","profileFields","passport_twitter__WEBPACK_IMPORTED_MODULE_3___default","consumerKey","TWITTER_CONSUMER_KEY","consumerSecret","TWITTER_CONSUMER_SECRET","passport_google_oauth__WEBPACK_IMPORTED_MODULE_4__","GOOGLE_APP_ID","GOOGLE_APP_SECRET","serializeUser","deserializeUser","_server__WEBPACK_IMPORTED_MODULE_0__","port","PORT","listen"],"mappings":"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","file":"server.bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 30);\n","module.exports = require(\"passport\");","module.exports = require(\"mongoose\");","module.exports = require(\"express\");","module.exports = require(\"hbs\");","module.exports = require(\"path\");","/* eslint-disable no-console */\n\nimport express from 'express';\nimport http from 'http';\nimport socketIO from 'socket.io';\nimport hbs from 'hbs';\nimport hbsUtilities from 'hbs-utils';\nimport path from 'path';\nimport Handlebars from 'handlebars';\n\nimport connect from './db';\nimport './passport';\nimport genSocketEvents from './socketEvent';\nimport globalMiddleware from './middleware';\nimport routes from './routes';\n\nconst app = express();\nconst server = http.createServer(app);\nconst io = socketIO(server);\nconnect().catch(err => console.error('Could not connect to DB', err.message));\n\nhbs.localsAsTemplateData(app);\nhbs.registerHelper('toJSON', obj => JSON.stringify(obj, null, 2));\nhbs.registerHelper('linkedAccounts', (accounts) => {\n  let out = '';\n  Object.entries(accounts).forEach(([type, acc]) => {\n    if ((type === 'local' && acc.email) || acc.token) {\n      out += `<tr><td>${type}</td>\n              <td>${type === 'local' ? acc.email : acc.username || acc.displayName}</td>\n              <td><form method=\"post\" action=\"/unlink/${type}\"><button>Unlink</button></form></td></tr>`;\n    }\n  });\n  return new Handlebars.SafeString(out);\n});\nhbs.registerHelper('linkableAccounts', (accounts) => {\n  const accountTypes = ['local', 'twitter', 'google', 'facebook'];\n  const linkable = accountTypes.filter(type => !accounts[type] || (type !== 'local' && !accounts[type].token));\n  return new Handlebars.SafeString(linkable.map(type => `<a class=\"linkButton\" href=\"/connect/${type}\">${type}</a>`).join(''));\n});\nconst hbsUtils = hbsUtilities(hbs);\nlet hbsRegisterPartials = hbsUtils.registerPartials.bind(hbsUtils);\nlet hbsRegisterPartialsOpt = {};\nif (process.env.NODE_ENV === 'development') {\n  hbsRegisterPartials = hbsUtils.registerWatchedPartials.bind(hbsUtils);\n  hbsRegisterPartialsOpt = {\n    onchange(template) { console.log(`hbs partial [${template}] added/changed`); },\n  };\n}\nhbsRegisterPartials(path.join(__dirname, '../views/partials'), hbsRegisterPartialsOpt);\napp.set('view engine', 'hbs');\n\napp.use(globalMiddleware);\n\nio.on('connection', (socket) => {\n  console.log('New user connected');\n  genSocketEvents(socket, io);\n});\n\n// pass variables to all templates\napp.use((req, res, next) => {\n  const flashes = req.flash();\n  res.locals.user = req.user && req.user.toObject({\n    transform(doc, ret) {\n      const newRet = Object.assign({}, ret);\n      delete newRet.__v;\n      delete newRet._id;\n      if (ret.local && Object.keys(ret.local).length) {\n        newRet.local.id = doc.id;\n      }\n      return newRet;\n    },\n  });\n  res.locals.flashes = Object.keys(flashes).length > 0 ? flashes : undefined;\n  next();\n});\napp.use('/', routes);\n\nexport { server as default, io };\n","module.exports = require(\"express-validator/check\");","module.exports = require(\"body-parser\");","module.exports = require(\"moment\");","module.exports = require(\"bcrypt\");","module.exports = require(\"handlebars\");","import mongoose from 'mongoose';\nimport bcrypt from 'bcrypt';\nimport isEmail from 'validator/lib/isEmail';\nimport beautifyUnique from 'mongoose-beautiful-unique-validation';\n\nconst userSchema = new mongoose.Schema({\n  local: {\n    email: {\n      type: String,\n      unique: 'An account with email {VALUE} already exists',\n      sparse: true, // allows us to add documents without unique fields\n      trim: true,\n      lowercase: true,\n      validate: [isEmail, 'Email is not valid'],\n    },\n    password: {\n      type: String,\n      trim: true,\n      minlength: 5,\n    },\n    username: {\n      type: String,\n      // required: 'Username is required',\n      unique: 'Username already taken',\n      sparse: true,\n      lowercase: true,\n      trim: true,\n      match: [/^[\\w-]+$/, \"Username must contain alphanumeric, '-', '_' characters only\"],\n    },\n  },\n  facebook: {\n    id: String,\n    token: String,\n    displayName: String,\n    email: String,\n  },\n  twitter: {\n    id: String,\n    token: String,\n    displayName: String,\n    username: String,\n  },\n  google: {\n    id: String,\n    token: String,\n    displayName: String,\n    email: String,\n  },\n});\n\nuserSchema.methods.isValidPassword = function isValidPassword(password) {\n  return bcrypt.compare(password, this.local.password);\n};\n\nuserSchema.statics.hashPassword = function hashPassword(plaintextPassword) {\n  if (!plaintextPassword) {\n    throw new Error('Password cannot be blank');\n  }\n  return bcrypt.hash(plaintextPassword, 12);\n};\n\n// if client tries creating a duplicate on a unique field, it will produce a low level\n// mongo db error. This plugin transforms that error into a mongoose validation error\n// that exists in an 'errors' object\nuserSchema.plugin(beautifyUnique);\n\nexport default mongoose.model('User', userSchema);\n","import mongoose from 'mongoose';\nimport './models';\n\nconst connect = async () => mongoose.connect(process.env.DB_URL);\n\nexport default connect;\n\n","const isRealString = string => typeof string === 'string' && string.trim().length > 0;\n\nexport default isRealString;\n","import moment from 'moment';\n\nexport const generateMessage = (from, text) => ({\n  from,\n  text,\n  createdAt: moment().valueOf(),\n});\n\nexport const generateLocationMessage = (from, latitude, longitude) => ({\n  from,\n  url: `https://www.google.com/maps?q=${latitude},${longitude}`,\n  createdAt: moment().valueOf(),\n});\n","import isRealString from './utils/validation';\nimport { generateMessage, generateLocationMessage } from './utils/message';\nimport Users from './utils/users';\n\nconst users = Users.getInstance();\n\n// update room list for people joining a room\nconst updateUserJoining = (io) => {\n  io.emit('updateRoomList', { rooms: users.getRoomList() });\n};\n\nconst joinRoom = (socket, io) => socket.on('join', (params, callback) => {\n  if (!isRealString(params.name) || !isRealString(params.room)) {\n    return callback('Name and Room name are required!');\n  }\n\n  const name = params.name.trim();\n  const room = params.room.trim().toLowerCase();\n  const user = users.getUser({ name });\n\n  if (user && user.room === room) {\n    return callback('Username taken!');\n  }\n\n  socket.join(room);\n  users.removeUser(socket.id);\n  users.addUser(socket.id, name, room);\n  io.to(room).emit('updateUserList', users.getUserList(room));\n  socket.emit('newMessage', generateMessage('Admin', `Welcome to the room ${room}!`));\n  socket.broadcast.to(room).emit('newMessage', generateMessage('Admin', `${name} joined the chat`));\n\n  updateUserJoining(io);\n  return callback();\n});\n\nconst createMessage = (socket, io) => socket.on('createMessage', (message, callback) => {\n  const user = users.getUser({ id: socket.id });\n\n  if (user && isRealString(message.text)) {\n    io.to(user.room).emit('newMessage', generateMessage(user.name, message.text));\n  }\n  callback();\n});\n\nconst createLocationMessage = (socket, io) => socket.on('createLocationMessage', (coords) => {\n  const user = users.getUser({ id: socket.id });\n\n  if (user) {\n    io.to(user.room).emit('newLocationMessage', generateLocationMessage(user.name, coords.latitude, coords.longitude));\n  }\n});\n\nconst disconnect = (socket, io) => socket.on('disconnect', () => {\n  const user = users.removeUser(socket.id);\n\n  io.to(user.room).emit('updateUserList', users.getUserList(user.room));\n  io.to(user.room).emit('newMessage', generateMessage('Admin', `${user.name} has left`));\n  updateUserJoining(io);\n});\n\nconst getRoomList = socket => socket.on('getRoomList', (_, callback) => {\n  callback({ rooms: users.getRoomList() });\n});\n\nexport default (socket, io) => ({\n  joinRoom: joinRoom(socket, io),\n  createMessage: createMessage(socket, io),\n  createLocationMessage: createLocationMessage(socket, io),\n  disconnect: disconnect(socket, io),\n  getRoomList: getRoomList(socket, io),\n});\n","class UsersClass {\n  constructor() {\n    this.users = [];\n  }\n\n  addUser(id, name, room) {\n    const user = { id, name, room };\n    this.users.push(user);\n    return user;\n  }\n\n  removeUser(id) {\n    const userToRemove = Object.assign({}, this.getUser({ id }));\n\n    if (userToRemove) {\n      this.users = this.users.filter(user => user.id !== userToRemove.id);\n    }\n\n    return userToRemove;\n  }\n\n  getUser({ id, name }) {\n    return this.users.find(user => user.id === id || user.name === name);\n  }\n\n  getUserList(room) {\n    const users = this.users.filter(user => user.room === room);\n    const namesArray = users.map(user => user.name);\n\n    return namesArray;\n  }\n\n  getRoomList() {\n    const rooms = new Set(this.users.map(user => user.room));\n    return [...rooms];\n  }\n}\n\nconst Users = (() => {\n  let instance;\n\n  const createInstance = () => new UsersClass();\n\n  return {\n    getInstance() {\n      if (!instance) {\n        instance = createInstance();\n      }\n      return instance;\n    },\n  };\n})();\n\nexport default Users;\nexport { UsersClass };\n","export const catchAsyncError = fn => (req, res, next) => fn(req, res, next).catch(next);\n","import mongoose from 'mongoose';\nimport { checkSchema, validationResult } from 'express-validator/check';\n\nimport { catchAsyncError } from '../utils/helpers';\n\nconst User = mongoose.model('User');\n\nconst signupForm = (req, res) => {\n  res.render('signup');\n};\n\nconst validateNewUser = [\n  checkSchema({\n    username: {\n      in: 'body',\n      isLength: {\n        errorMessage: 'Username must not be empty',\n        options: { min: 1 },\n      },\n      matches: {\n        errorMessage: \"Username must be letters, numbers, '_', '-' only\",\n        options: /^[\\w-]+$/,\n      },\n      trim: true,\n    },\n    email: {\n      in: 'body',\n      isEmail: {\n        errorMessage: 'Email address is not valid',\n      },\n      trim: true,\n      normalizeEmail: {\n        options: {\n          all_lowercase: true,\n          gmail_convert_googlemaildotcom: true,\n          gmail_remove_dots: true,\n          gmail_remove_subaddress: true,\n        },\n      },\n    },\n    password: {\n      in: 'body',\n      isLength: {\n        errorMessage: 'Password must be at least 5 characters long',\n        options: { min: 5 },\n      },\n      trim: true,\n    },\n    'password-confirm': {\n      in: 'body',\n      custom: {\n        options: (value, { req }) => {\n          if (req.body.password !== value) {\n            throw new Error('Password confirmation does not match password field');\n          }\n          return true;\n        },\n      },\n    },\n  }),\n  (req, res, next) => {\n    const errors = validationResult(req).formatWith(({ msg }) => msg);\n    if (errors.isEmpty()) {\n      next();\n    } else {\n      req.flash('error', errors.array({ onlyFirstError: true }));\n      res.render('signup', { body: req.body, flashes: req.flash() });\n    }\n  }];\n\nconst createOne = async (req, res, next) => {\n  const { email, password, username } = req.body;\n  try {\n    const user = new User({ local: { email, password: await User.hashPassword(password), username } });\n    await user.save();\n    req.login(user, next);\n    req.flash('success', 'New account created!');\n    res.redirect('/');\n  } catch (err) {\n    if (err.errors) {\n      const keys = Object.keys(err.errors);\n      const flashes = keys.map(key => err.errors[key].message);\n      req.flash('error', flashes);\n      res.render('signup', { body: { username, email }, flashes: req.flash() });\n    } else {\n      next(err);\n    }\n  }\n};\n\nconst getOne = async (req, res) => {\n  const user = await User.findById(req.user.id);\n  res.send(`get user\\n ${user}`);\n};\n\nconst updateOne = (req, res) => {\n  res.send(`update user\\n ${req.docFromId}`);\n};\n\nconst deleteOne = (req, res) => {\n  res.send(`delete user\\n ${req.docFromId}`);\n};\n\nexport default {\n  createOne,\n  getOne: catchAsyncError(getOne),\n  updateOne: catchAsyncError(updateOne),\n  deleteOne: catchAsyncError(deleteOne),\n  signupForm,\n  validateNewUser,\n};\n","import express from 'express';\nimport { ensureLoggedIn } from 'connect-ensure-login';\nimport mongoose from 'mongoose';\nimport userController from '../controllers/user.controller';\n\nexport const userRouter = express.Router();\nconst User = mongoose.model('User');\n\nuserRouter.param('id', async (req, res, next, id) => {\n  try {\n    if (!mongoose.Types.ObjectId.isValid(id)) {\n      throw new Error('Invalid user id');\n    }\n    const user = await User.findById(id);\n    if (!user) {\n      throw new Error('No user found');\n    } else {\n      req.docFromId = user;\n      next();\n    }\n  } catch (err) {\n    next(err.message);\n  }\n});\n\nuserRouter.route('/signup')\n  .get(userController.signupForm)\n  .post(userController.validateNewUser, userController.createOne);\n\nuserRouter.route('/user/:id')\n  .get(ensureLoggedIn(), userController.getOne)\n  .put(userController.updateOne)\n  .delete(userController.deleteOne);\n","import passport from 'passport';\nimport mongoose from 'mongoose';\n\nconst User = mongoose.model('User');\n\nconst loginForm = (req, res) => {\n  res.render('login');\n};\n\n// logs in a user\nconst loginUser = passport.authenticate('local', {\n  successReturnToOrRedirect: '/',\n  failureRedirect: '/login',\n  failureFlash: 'Email or password is invalid',\n  successFlash: 'You have logged in',\n});\n\nconst logoutUser = (req, res) => {\n  req.logout();\n  req.flash('info', 'You have logged out');\n  res.redirect('/');\n};\n\n// checks credentials but does not log them in\nconst authLocal = passport.authorize('local', {\n  failureRedirect: '/connect/local',\n  failureFlash: 'Email or password is invalid',\n});\n\nconst genOauthLogin = (provider, config = {}) => ({\n  auth(req, res, next) {\n    const fn = req.user ? passport.authorize : passport.authenticate;\n    return fn.call(passport, provider, config.scope && { scope: config.scope })(req, res, next);\n  },\n  authCb(req, res, next) {\n    const fn = req.user ? passport.authorize : passport.authenticate;\n    const routes = req.user ?\n      {\n        failureRedirect: '/profile',\n        failureFlash: `${provider} account was not linked`,\n      } :\n      (err, user, info) => {\n        if (err) { return next(err); }\n        if (!user) {\n          req.flash('error', `Permission to login via ${provider} was denied`);\n          return res.redirect('/login');\n        }\n\n        return req.login(user, (error) => {\n          if (error) { return next(error); }\n          req.flash('success', `You have logged in, ${user[provider].displayName || user[provider].username}`);\n          if (info.firstLogin) { return res.redirect('/profile'); }\n          return res.redirect('/');\n        });\n      };\n    return fn.call(passport, provider, routes)(req, res, next);\n  },\n});\n\nconst linkAccount = async (req, res, next) => {\n  const { user, account } = req;\n\n  // user who has already logged in has authorised another account so we need to link them\n  if (user && account) {\n    const accountObj = account.toObject({\n      transform(doc, ret) {\n        const newRet = Object.assign({}, ret);\n        delete newRet.__v;\n        delete newRet._id;\n        return newRet;\n      },\n    });\n    if (accountObj.local) {\n      /* if req.user is a social account and they try to link to local, then we must delete the\n          local account otherwise there will be a duplicate in the db when we try to add the local\n          info to the social account. Since the user model doesn't allow duplicate emails, it will\n          throw an error if we didn't do this */\n      await User.deleteOne({ 'local.email': accountObj.local.email });\n    }\n    Object.assign(user, accountObj);\n    await user.save();\n    await account.remove();\n    req.flash('success', 'Accounts have been linked');\n    return res.redirect('/profile');\n  }\n  return next();\n};\n\nconst unlinkAccount = async (req, res) => {\n  const type = req.params.account;\n  const { user } = req;\n  if (type === 'local') {\n    const local = Object.assign({}, user.local);\n    user.local = undefined;\n    await user.save();\n    await User.create({ local });\n  } else {\n    user[type].token = undefined;\n    await user.save();\n  }\n  req.flash('success', 'Account has been unlinked');\n  res.redirect('/profile');\n};\n\nconst profile = async (req, res) => {\n  res.render('profile');\n};\n\nexport default {\n  loginForm, loginUser, logoutUser, genOauthLogin, profile, authLocal, linkAccount, unlinkAccount,\n};\n","import express from 'express';\n\nimport authController from '../controllers/auth.controller';\nimport { catchAsyncError } from '../utils/helpers';\n\nconst isLoggedIn = (req, res, next) => {\n  if (req.isAuthenticated()) {\n    next();\n  } else {\n    res.redirect('/');\n  }\n};\n\nexport const authRouter = express.Router();\n\nauthRouter.get('/login', authController.loginForm);\nauthRouter.post('/login', authController.loginUser);\nauthRouter.get('/logout', isLoggedIn, authController.logoutUser);\nauthRouter.get('/profile', isLoggedIn, catchAsyncError(authController.profile));\nauthRouter.get('/connect/local', authController.loginForm);\nauthRouter.post('/connect/local', authController.authLocal, catchAsyncError(authController.linkAccount));\nauthRouter.post('/unlink/:account', catchAsyncError(authController.unlinkAccount));\n\n((providers) => {\n  providers.forEach(({ provider, config }) => {\n    const { auth, authCb } = authController.genOauthLogin(provider, config);\n    authRouter.get(`/login/${provider}`, auth);\n    authRouter.get(`/login/${provider}/callback`, authCb, catchAsyncError(authController.linkAccount));\n    authRouter.get(`/connect/${provider}`, auth);\n  });\n})([\n  {\n    provider: 'facebook',\n    config: {\n      scope: 'email',\n    },\n  },\n  { provider: 'twitter' },\n  {\n    provider: 'google',\n    config: {\n      scope: 'https://www.googleapis.com/auth/userinfo.profile',\n    },\n  },\n]);\n","import express from 'express';\nimport { userRouter } from './user.router';\nimport { authRouter } from './auth.router';\n\nconst routes = express.Router();\n\nroutes.use('/', authRouter);\nroutes.use('/', userRouter);\n\nroutes.get('/', (req, res) => {\n  res.render('index', { title: 'Join' });\n});\n\nroutes.post('/chat', (req, res) => {\n  res.render('chat', { title: 'Chat' });\n});\n\n// handle mongoose validation errors\nroutes.use((err, req, res, next) => {\n  if (!err.errors) {\n    return next(err);\n  }\n\n  const validationErrors = Object.keys(err.errors);\n\n  if (validationErrors.length > 0) {\n    validationErrors.forEach(e => req.flash('error', err.errors[e].message));\n  }\n  return res.redirect('back');\n});\n\nroutes.use((err, req, res, next) => { // eslint-disable-line no-unused-vars\n  res.status(500).send(`something messed up: ${err.message}`);\n});\n\nexport default routes;\n","module.exports = require(\"connect-ensure-login\");","module.exports = require(\"connect-flash\");","module.exports = require(\"express-session\");","import express from 'express';\nimport path from 'path';\nimport bodyParser from 'body-parser';\nimport passport from 'passport';\nimport session from 'express-session';\nimport flash from 'connect-flash';\n\nexport default [\n  express.static(path.join(__dirname, '../public')),\n  bodyParser.json(),\n  bodyParser.urlencoded({ extended: true }),\n  session({ secret: process.env.SESSION_SECRET, resave: false, saveUninitialized: false }),\n  passport.initialize(),\n  passport.session(),\n  flash(),\n];\n","module.exports = require(\"lodash\");","module.exports = require(\"passport-google-oauth\");","module.exports = require(\"passport-twitter\");","module.exports = require(\"passport-facebook\");","module.exports = require(\"passport-local\");","module.exports = require(\"mongoose-beautiful-unique-validation\");","module.exports = require(\"validator/lib/isEmail\");","module.exports = require(\"hbs-utils\");","module.exports = require(\"socket.io\");","module.exports = require(\"http\");","import passport from 'passport';\nimport LocalStrategy from 'passport-local';\nimport FacebookStrategy from 'passport-facebook';\nimport TwitterStrategy from 'passport-twitter';\nimport { OAuth2Strategy as GoogleStrategy } from 'passport-google-oauth';\nimport mongoose from 'mongoose';\nimport _ from 'lodash';\n\nconst User = mongoose.model('User');\n\npassport.use(new LocalStrategy(\n  { usernameField: 'email', passReqToCallback: true },\n  async (req, email, password, done) => {\n    try {\n      const user = await User.findOne({ 'local.email': email });\n      if (!user) {\n        return done(null, false);\n      }\n\n      const isValidPassword = await user.isValidPassword(password);\n      if (!isValidPassword) {\n        return done(null, false);\n      }\n\n      /* user is either\n         a) already logged in via oauth and trying to link this local account so the user will be\n         injected into req.account\n         b) logging into their local account so the user will be injected into req.user */\n      return done(null, user);\n    } catch (err) {\n      return done(err, null, { message: 'Could not authenticate. Please try again' });\n    }\n  },\n));\n\nconst genUniqueUsername = async (name) => {\n  if (!name) { return undefined; }\n  const snakeCase = name.toLowerCase().replace(/ /g, '_');\n  const usernameRegex = new RegExp(`^${snakeCase}\\d*$`);\n  const usernames = await User.find({ username: usernameRegex }, 'username');\n  let newUsername = snakeCase;\n  // find the first unique username with format username<incrementing number>\n  for (let i = 0; _.find(usernames, { username: newUsername }); i += 1) {\n    newUsername = snakeCase + (usernames.length + i);\n  }\n  return newUsername;\n};\n\nconst getEmail = profile => profile.emails && profile.emails.length && profile.emails[0].value;\n\nconst genOauthCb = provider => async (req, accessToken, refreshTokenOrSecret, profile, done) => {\n  try {\n    let user = await User.findOne({ [`${provider}.id`]: profile.id });\n    if (!req.user) { // not already logged in\n      if (user) {\n        return done(null, user);\n      }\n\n      user = await User.create({\n        [provider]: {\n          id: profile.id,\n          username: await genUniqueUsername(profile.username),\n          displayName: profile.displayName,\n          token: accessToken,\n          email: getEmail(profile),\n        },\n      });\n\n      /* when a user logs in for the first time, we need a way to inform the authController so that\n         they can send them to a profile page to let them change their username if they want.\n         firstLogin is my own custom prop that will be sent to the custom callback whenever\n         passport.auth(enticate|orize)() is called\n         */\n      return done(null, user, { firstLogin: true });\n    }\n    /* user already logged in and trying to link another account  */\n\n    /* if user tries to link an already linked account, just return the original user */\n    if (user) {\n      /* user previously unlinked account and now wants to relink it.\n        we must update the token and other profile info */\n      if (!user[provider].token) {\n        Object.assign(user[provider], {\n          username: await genUniqueUsername(profile.username),\n          displayName: profile.displayName,\n          token: accessToken,\n          email: getEmail(profile),\n        });\n        user = await user.save();\n      }\n      return done(null, user);\n    }\n\n    /* user linking an account they have never authorised before so lets create it first */\n    user = await User.create({\n      [provider]: {\n        id: profile.id,\n        username: await genUniqueUsername(profile.username),\n        displayName: profile.displayName,\n        token: accessToken,\n        email: getEmail(profile),\n      },\n    });\n\n    return done(null, user);\n  } catch (err) {\n    return done(err, false, { message: 'Could not authenticate. Please try again' });\n  }\n};\n\npassport.use(new FacebookStrategy(\n  {\n    clientID: process.env.FACEBOOK_APP_ID,\n    clientSecret: process.env.FACEBOOK_APP_SECRET,\n    callbackURL: `${process.env.DOMAIN}/login/facebook/callback`,\n    profileFields: ['email', 'displayName'],\n    passReqToCallback: true,\n  },\n  genOauthCb('facebook'),\n));\n\npassport.use(new TwitterStrategy(\n  {\n    consumerKey: process.env.TWITTER_CONSUMER_KEY,\n    consumerSecret: process.env.TWITTER_CONSUMER_SECRET,\n    callbackURL: `${process.env.DOMAIN}/login/twitter/callback`,\n    passReqToCallback: true,\n  },\n  genOauthCb('twitter'),\n));\n\npassport.use(new GoogleStrategy(\n  {\n    clientID: process.env.GOOGLE_APP_ID,\n    clientSecret: process.env.GOOGLE_APP_SECRET,\n    callbackURL: `${process.env.DOMAIN}/login/google/callback`,\n    passReqToCallback: true,\n  },\n  genOauthCb('google'),\n));\n\npassport.serializeUser((user, done) => done(null, user.id));\npassport.deserializeUser(async (id, done) => {\n  try {\n    const user = await User.findById(id);\n    return done(null, user);\n  } catch (err) {\n    return done(err);\n  }\n});\n","/* eslint-disable no-console */\n\nimport server, { io } from './server';\n\nconst port = process.env.PORT || 4000;\nlet cServer = server;\nlet cIo = io;\n\nif (module.hot) {\n  module.hot.accept('./server', () => {\n    console.log('Re-attaching event listeners to updated server module');\n    cServer.close();\n    server.listen(port);\n    cServer = server;\n\n    cIo.close();\n    io.attach(cServer);\n    cIo = io;\n  });\n}\n\nserver.listen(port, () => {\n  console.log(`Server started on port ${port}`);\n});\n"],"sourceRoot":""}