{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"mongoose\"","webpack:///external \"express\"","webpack:///external \"passport\"","webpack:///external \"path\"","webpack:///external \"hbs\"","webpack:///external \"body-parser\"","webpack:///external \"moment\"","webpack:///external \"bcrypt\"","webpack:///external \"connect-ensure-login\"","webpack:///external \"connect-flash\"","webpack:///external \"express-session\"","webpack:///external \"passport-local\"","webpack:///external \"mongoose-beautiful-unique-validation\"","webpack:///external \"validator/lib/isEmail\"","webpack:///external \"socket.io\"","webpack:///external \"http\"","webpack:///./server/db.js","webpack:///./server/models/user.model.js","webpack:///./server/passport.js","webpack:///./server/utils/validation.js","webpack:///./server/utils/message.js","webpack:///./server/socketEvent.js","webpack:///./server/utils/users.js","webpack:///./server/middleware.js","webpack:///./server/utils/helpers.js","webpack:///./server/controllers/user.controller.js","webpack:///./server/routes/user.router.js","webpack:///./server/controllers/auth.controller.js","webpack:///./server/routes/auth.router.js","webpack:///./server/routes/index.js","webpack:///./server/server.js","webpack:///./server/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","require","db","external_mongoose_default","a","connect","userSchema","Schema","email","type","String","required","unique","trim","lowercase","validate","isEmail_default","password","minlength","username","methods","[object Object]","plaintextPassword","Error","external_bcrypt_default","hash","compare","this","pre","async","next","hashPassword","plugin","external_mongoose_beautiful_unique_validation_default","model","User","external_passport_default","use","external_passport_local_default","usernameField","done","user","findOne","isValidPassword","err","serializeUser","id","deserializeUser","findById","validation","string","length","generateMessage","from","text","createdAt","external_moment_default","valueOf","socketEvent_users","instance","createInstance","users","room","push","userToRemove","assign","getUser","filter","find","map","Set","getInstance","updateUserJoining","io","emit","rooms","getRoomList","createLocationMessage","socket","on","coords","to","latitude","longitude","url","generateLocationMessage","socketEvent","joinRoom","params","callback","toLowerCase","join","removeUser","addUser","getUserList","broadcast","createMessage","message","disconnect","_","middleware","external_express_default","static","external_path_default","__dirname","external_body_parser_default","json","urlencoded","extended","external_express_session_default","secret","initialize","session","external_connect_flash_default","catchAsyncError","fn","req","res","catch","user_controller_User","user_controller","createOne","body","save","flash","redirect","getOne","send","updateOne","docFromId","deleteOne","signupForm","render","userRouter","Router","user_router_User","param","Types","ObjectId","isValid","route","post","external_connect_ensure_login_","put","delete","auth_controller","loginForm","loginUser","authenticate","successReturnToOrRedirect","failureRedirect","authRouter","routes","title","errors","validationErrors","keys","forEach","e","status","server_routes","app","server","external_http_default","createServer","server_io","external_socket_io_default","console","error","external_hbs_default","localsAsTemplateData","registerPartials","registerHelper","obj","JSON","stringify","set","log","locals","flashes","port","process","env","PORT","listen"],"mappings":"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","file":"server.bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 17);\n","module.exports = require(\"mongoose\");","module.exports = require(\"express\");","module.exports = require(\"passport\");","module.exports = require(\"path\");","module.exports = require(\"hbs\");","module.exports = require(\"body-parser\");","module.exports = require(\"moment\");","module.exports = require(\"bcrypt\");","module.exports = require(\"connect-ensure-login\");","module.exports = require(\"connect-flash\");","module.exports = require(\"express-session\");","module.exports = require(\"passport-local\");","module.exports = require(\"mongoose-beautiful-unique-validation\");","module.exports = require(\"validator/lib/isEmail\");","module.exports = require(\"socket.io\");","module.exports = require(\"http\");","import mongoose from 'mongoose';\n\nconst connect = () => mongoose.connect('mongodb://127.0.0.1:27017/node-chat-app');\n\nexport default connect;\n\n","import mongoose from 'mongoose';\nimport bcrypt from 'bcrypt';\nimport isEmail from 'validator/lib/isEmail';\nimport beautifyUnique from 'mongoose-beautiful-unique-validation';\n\nconst userSchema = new mongoose.Schema({\n  email: {\n    type: String,\n    required: 'You must supply a email',\n    unique: 'An account with email {VALUE} already exists',\n    trim: true,\n    lowercase: true,\n    validate: [isEmail, 'Email is not valid'],\n  },\n  password: {\n    type: String,\n    required: 'You must supply a password',\n    trim: true,\n    minlength: 5,\n  },\n  username: {\n    type: String,\n    required: 'Username is required',\n    unique: 'Username already taken',\n    trim: true,\n  },\n});\n\nuserSchema.methods = {\n  hashPassword(plaintextPassword) {\n    if (!plaintextPassword) {\n      throw new Error('Password cannot be blank');\n    }\n    return bcrypt.hash(plaintextPassword, 12);\n  },\n  isValidPassword(password) {\n    return bcrypt.compare(password, this.password);\n  },\n};\n\nuserSchema.pre('save', async function preSaveUser(next) {\n  this.password = await this.hashPassword(this.password);\n  next();\n});\n\n// if client tries creating a duplicate on a unique field, it will produce a low level\n// mongo db error. This plugin transforms that error into a mongoose validation error\n// that exists in an 'errors' object\nuserSchema.plugin(beautifyUnique);\n\nexport default mongoose.model('User', userSchema);\n","import passport from 'passport';\nimport LocalStrategy from 'passport-local';\nimport mongoose from 'mongoose';\n\nconst User = mongoose.model('User');\n\npassport.use(new LocalStrategy({ usernameField: 'email' }, async (email, password, done) => {\n  try {\n    const user = await User.findOne({ email });\n    if (!user) {\n      return done(null, false);\n    }\n\n    const isValidPassword = await user.isValidPassword(password);\n    if (!isValidPassword) {\n      return done(null, false);\n    }\n\n    return done(null, user);\n  } catch (err) {\n    return done(err);\n  }\n}));\n\npassport.serializeUser((user, done) => done(null, user.id));\npassport.deserializeUser(async (id, done) => {\n  try {\n    const user = await User.findById(id);\n    return done(null, user);\n  } catch (err) {\n    return done(err);\n  }\n});\n","const isRealString = string => typeof string === 'string' && string.trim().length > 0;\n\nexport default isRealString;\n","import moment from 'moment';\n\nexport const generateMessage = (from, text) => ({\n  from,\n  text,\n  createdAt: moment().valueOf(),\n});\n\nexport const generateLocationMessage = (from, latitude, longitude) => ({\n  from,\n  url: `https://www.google.com/maps?q=${latitude},${longitude}`,\n  createdAt: moment().valueOf(),\n});\n","import isRealString from './utils/validation';\nimport { generateMessage, generateLocationMessage } from './utils/message';\nimport Users from './utils/users';\n\nconst users = Users.getInstance();\n\n// update room list for people joining a room\nconst updateUserJoining = (io) => {\n  io.emit('updateRoomList', { rooms: users.getRoomList() });\n};\n\nconst joinRoom = (socket, io) => socket.on('join', (params, callback) => {\n  if (!isRealString(params.name) || !isRealString(params.room)) {\n    return callback('Name and Room name are required!');\n  }\n\n  const name = params.name.trim();\n  const room = params.room.trim().toLowerCase();\n  const user = users.getUser({ name });\n\n  if (user && user.room === room) {\n    return callback('Username taken!');\n  }\n\n  socket.join(room);\n  users.removeUser(socket.id);\n  users.addUser(socket.id, name, room);\n  io.to(room).emit('updateUserList', users.getUserList(room));\n  socket.emit('newMessage', generateMessage('Admin', `Welcome to the room ${room}!`));\n  socket.broadcast.to(room).emit('newMessage', generateMessage('Admin', `${name} joined the chat`));\n\n  updateUserJoining(io);\n  return callback();\n});\n\nconst createMessage = (socket, io) => socket.on('createMessage', (message, callback) => {\n  const user = users.getUser({ id: socket.id });\n\n  if (user && isRealString(message.text)) {\n    io.to(user.room).emit('newMessage', generateMessage(user.name, message.text));\n  }\n  callback();\n});\n\nconst createLocationMessage = (socket, io) => socket.on('createLocationMessage', (coords) => {\n  const user = users.getUser({ id: socket.id });\n\n  if (user) {\n    io.to(user.room).emit('newLocationMessage', generateLocationMessage(user.name, coords.latitude, coords.longitude));\n  }\n});\n\nconst disconnect = (socket, io) => socket.on('disconnect', () => {\n  const user = users.removeUser(socket.id);\n\n  io.to(user.room).emit('updateUserList', users.getUserList(user.room));\n  io.to(user.room).emit('newMessage', generateMessage('Admin', `${user.name} has left`));\n  updateUserJoining(io);\n});\n\nconst getRoomList = socket => socket.on('getRoomList', (_, callback) => {\n  callback({ rooms: users.getRoomList() });\n});\n\nexport default (socket, io) => ({\n  joinRoom: joinRoom(socket, io),\n  createMessage: createMessage(socket, io),\n  createLocationMessage: createLocationMessage(socket, io),\n  disconnect: disconnect(socket, io),\n  getRoomList: getRoomList(socket, io),\n});\n","class UsersClass {\n  constructor() {\n    this.users = [];\n  }\n\n  addUser(id, name, room) {\n    const user = { id, name, room };\n    this.users.push(user);\n    return user;\n  }\n\n  removeUser(id) {\n    const userToRemove = Object.assign({}, this.getUser({ id }));\n\n    if (userToRemove) {\n      this.users = this.users.filter(user => user.id !== userToRemove.id);\n    }\n\n    return userToRemove;\n  }\n\n  getUser({ id, name }) {\n    return this.users.find(user => user.id === id || user.name === name);\n  }\n\n  getUserList(room) {\n    const users = this.users.filter(user => user.room === room);\n    const namesArray = users.map(user => user.name);\n\n    return namesArray;\n  }\n\n  getRoomList() {\n    const rooms = new Set(this.users.map(user => user.room));\n    return [...rooms];\n  }\n}\n\nconst Users = (() => {\n  let instance;\n\n  const createInstance = () => new UsersClass();\n\n  return {\n    getInstance() {\n      if (!instance) {\n        instance = createInstance();\n      }\n      return instance;\n    },\n  };\n})();\n\nexport default Users;\nexport { UsersClass };\n","import express from 'express';\nimport path from 'path';\nimport bodyParser from 'body-parser';\nimport passport from 'passport';\nimport session from 'express-session';\nimport flash from 'connect-flash';\n\nexport default [\n  express.static(path.join(__dirname, '../../public')),\n  bodyParser.json(),\n  bodyParser.urlencoded({ extended: true }),\n  session({ secret: 'keyboard cat' }),\n  passport.initialize(),\n  passport.session(),\n  flash(),\n];\n","export const catchAsyncError = fn => (req, res, next) => fn(req, res, next).catch(next);\n","import mongoose from 'mongoose';\nimport { catchAsyncError } from '../utils/helpers';\n\nconst User = mongoose.model('User');\n\nconst signupForm = (req, res) => {\n  res.render('signup');\n};\n\nconst createOne = async (req, res) => {\n  const { email, password, username } = req.body;\n  const user = new User({ email, password, username });\n  await user.save();\n  req.flash('success', 'New account created!');\n  res.redirect('/');\n};\n\nconst getOne = async (req, res) => {\n  const user = await User.findById(req.user.id);\n  res.send(`get user\\n ${user}`);\n};\n\nconst updateOne = (req, res) => {\n  res.send(`update user\\n ${req.docFromId}`);\n};\n\nconst deleteOne = (req, res) => {\n  res.send(`delete user\\n ${req.docFromId}`);\n};\n\nexport default {\n  createOne: catchAsyncError(createOne),\n  getOne: catchAsyncError(getOne),\n  updateOne: catchAsyncError(updateOne),\n  deleteOne: catchAsyncError(deleteOne),\n  signupForm,\n};\n","import express from 'express';\nimport { ensureLoggedIn } from 'connect-ensure-login';\nimport mongoose from 'mongoose';\nimport userController from '../controllers/user.controller';\n\nexport const userRouter = express.Router();\nconst User = mongoose.model('User');\n\nuserRouter.param('id', async (req, res, next, id) => {\n  try {\n    if (!mongoose.Types.ObjectId.isValid(id)) {\n      throw new Error('Invalid user id');\n    }\n    const user = await User.findById(id);\n    if (!user) {\n      throw new Error('No user found');\n    } else {\n      req.docFromId = user;\n      next();\n    }\n  } catch (err) {\n    next(err.message);\n  }\n});\n\nuserRouter.route('/signup')\n  .get(userController.signupForm)\n  .post(userController.createOne);\n\nuserRouter.route('/user/:id')\n  .get(ensureLoggedIn(), userController.getOne)\n  .put(userController.updateOne)\n  .delete(userController.deleteOne);\n","import passport from 'passport';\n\nconst loginForm = (req, res) => {\n  res.render('login');\n};\n\nconst loginUser = passport.authenticate('local', {\n  successReturnToOrRedirect: '/',\n  failureRedirect: '/login',\n});\n\nexport default { loginForm, loginUser };\n","import express from 'express';\n\nimport authController from '../controllers/auth.controller';\n\nexport const authRouter = express.Router();\n\nauthRouter.get('/login', authController.loginForm);\nauthRouter.post('/login', authController.loginUser);\n","import express from 'express';\nimport { userRouter } from './user.router';\nimport { authRouter } from './auth.router';\n\nconst routes = express.Router();\n\nroutes.use('/', authRouter);\nroutes.use('/', userRouter);\n\nroutes.get('/', (req, res) => {\n  res.render('index', { title: 'Join' });\n});\n\nroutes.post('/chat', (req, res) => {\n  res.render('chat', { title: 'Chat' });\n});\n\n// handle mongoose validation errors\nroutes.use((err, req, res, next) => {\n  if (!err.errors) {\n    return next(err);\n  }\n\n  const validationErrors = Object.keys(err.errors);\n\n  if (validationErrors.length > 0) {\n    validationErrors.forEach(e => req.flash('error', err.errors[e].message));\n  }\n  return res.redirect('back');\n});\n\nroutes.use((err, req, res, next) => { // eslint-disable-line no-unused-vars\n  res.status(500).send(`something messed up: ${err.message}`);\n});\n\nexport default routes;\n","/* eslint-disable no-console */\n\nimport express from 'express';\nimport http from 'http';\nimport socketIO from 'socket.io';\nimport hbs from 'hbs';\nimport path from 'path';\n\nimport connect from './db';\nimport './models';\nimport './passport';\nimport genSocketEvents from './socketEvent';\nimport globalMiddleware from './middleware';\nimport routes from './routes';\n\nconst app = express();\nconst server = http.createServer(app);\nconst io = socketIO(server);\nconnect().catch(err => console.error('Could not connect to DB', err.message));\n\nhbs.localsAsTemplateData(app);\nhbs.registerPartials(path.join(__dirname, '../../views/partials'));\nhbs.registerHelper('toJSON', obj => JSON.stringify(obj, null, 2));\napp.set('view engine', 'hbs');\n\napp.use(globalMiddleware);\n\nio.on('connection', (socket) => {\n  console.log('New user connected!');\n  genSocketEvents(socket, io);\n});\n\n// pass variables to all templates\napp.use((req, res, next) => {\n  res.locals.user = req.user;\n  res.locals.flashes = req.flash();\n  next();\n});\napp.use('/', routes);\n\nexport { server as default, io };\n","/* eslint-disable no-console */\n\nimport server, { io } from './server';\n\nconst port = process.env.PORT || 3000;\n\nlet cServer = server;\nlet cIo = io;\n\nif (module.hot) {\n  module.hot.accept('./server', () => {\n    console.log('Re-attaching event listeners to updated server module');\n    cServer.close();\n    server.listen(port);\n    cServer = server;\n\n    cIo.close();\n    io.attach(cServer);\n    cIo = io;\n  });\n}\n\nserver.listen(port, () => {\n  console.log(`Server started on port ${port}`);\n});\n"],"sourceRoot":""}