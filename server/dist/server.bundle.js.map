{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"mongoose\"","webpack:///external \"passport\"","webpack:///external \"express\"","webpack:///external \"body-parser\"","webpack:///external \"moment\"","webpack:///external \"bcrypt\"","webpack:///external \"connect-ensure-login\"","webpack:///external \"express-session\"","webpack:///external \"path\"","webpack:///external \"passport-local\"","webpack:///external \"validator/lib/isEmail\"","webpack:///external \"socket.io\"","webpack:///external \"http\"","webpack:///./server/db.js","webpack:///./server/models/user.model.js","webpack:///./server/passport.js","webpack:///./server/utils/validation.js","webpack:///./server/utils/message.js","webpack:///./server/utils/users.js","webpack:///./server/socketEvent.js","webpack:///./server/middleware.js","webpack:///./server/utils/helpers.js","webpack:///./server/controllers/user.controller.js","webpack:///./server/routes/user.router.js","webpack:///./server/routes/index.js","webpack:///./server/server.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","require","db","external_mongoose_default","a","connect","userSchema","Schema","email","type","String","required","unique","trim","lowercase","validate","isEmail_default","password","minlength","methods","[object Object]","plaintextPassword","Error","external_bcrypt_default","hash","compare","this","pre","async","next","hashPassword","model","User","external_passport_default","use","external_passport_local_default","usernameField","done","user","findOne","isValidPassword","err","serializeUser","id","deserializeUser","findById","validation","string","length","generateMessage","from","text","createdAt","external_moment_default","valueOf","users","instance","createInstance","room","push","userToRemove","assign","getUser","filter","find","map","Set","getInstance","updateUserJoining","io","emit","rooms","getRoomList","createLocationMessage","socket","on","coords","to","latitude","longitude","url","generateLocationMessage","socketEvent","joinRoom","params","callback","toLowerCase","join","removeUser","addUser","getUserList","broadcast","createMessage","message","disconnect","_","middleware","external_express_default","static","external_path_default","__dirname","external_body_parser_default","json","urlencoded","extended","external_express_session_default","secret","initialize","session","catchAsyncError","fn","req","res","catch","user_controller_User","user_controller","createOne","body","newUser","save","send","getOne","updateOne","docFromId","deleteOne","userRouter","Router","user_router_User","param","Types","ObjectId","isValid","route","post","external_connect_ensure_login_","put","delete","routes","authenticate","successReturnToOrRedirect","failureRedirect","status","server_routes","port","process","env","PORT","app","server","external_http_default","createServer","server_io","external_socket_io_default","console","error","set","log","listen"],"mappings":"aACA,IAAAA,KAGA,SAAAC,EAAAC,GAGA,GAAAF,EAAAE,GACA,OAAAF,EAAAE,GAAAC,QAGA,IAAAC,EAAAJ,EAAAE,IACAG,EAAAH,EACAI,GAAA,EACAH,YAUA,OANAI,EAAAL,GAAAM,KAAAJ,EAAAD,QAAAC,IAAAD,QAAAF,GAGAG,EAAAE,GAAA,EAGAF,EAAAD,QAKAF,EAAAQ,EAAAF,EAGAN,EAAAS,EAAAV,EAGAC,EAAAU,EAAA,SAAAR,EAAAS,EAAAC,GACAZ,EAAAa,EAAAX,EAAAS,IACAG,OAAAC,eAAAb,EAAAS,GACAK,cAAA,EACAC,YAAA,EACAC,IAAAN,KAMAZ,EAAAmB,EAAA,SAAAjB,GACAY,OAAAC,eAAAb,EAAA,cAAiDkB,OAAA,KAIjDpB,EAAAqB,EAAA,SAAAlB,GACA,IAAAS,EAAAT,KAAAmB,WACA,WAA2B,OAAAnB,EAAA,SAC3B,WAAiC,OAAAA,GAEjC,OADAH,EAAAU,EAAAE,EAAA,IAAAA,GACAA,GAIAZ,EAAAa,EAAA,SAAAU,EAAAC,GAAsD,OAAAV,OAAAW,UAAAC,eAAAnB,KAAAgB,EAAAC,IAGtDxB,EAAA2B,EAAA,GAIA3B,IAAA4B,EAAA,oBCnEAzB,EAAAD,QAAA2B,QAAA,2BCAA1B,EAAAD,QAAA2B,QAAA,2BCAA1B,EAAAD,QAAA2B,QAAA,0BCAA1B,EAAAD,QAAA2B,QAAA,8BCAA1B,EAAAD,QAAA2B,QAAA,yBCAA1B,EAAAD,QAAA2B,QAAA,yBCAA1B,EAAAD,QAAA2B,QAAA,uCCAA1B,EAAAD,QAAA2B,QAAA,kCCAA1B,EAAAD,QAAA2B,QAAA,uBCAA1B,EAAAD,QAAA2B,QAAA,iCCAA1B,EAAAD,QAAA2B,QAAA,wCCAA1B,EAAAD,QAAA2B,QAAA,4BCAA1B,EAAAD,QAAA2B,QAAA,mHCIA,IAAAC,EAFA,IAAAC,EAAAC,EAAAC,QAAA,4ECEA,MAAAC,EAAA,IAAAH,EAAAC,EAAAG,QACAC,OACAC,KAAAC,OACAC,SAAA,0BACAC,OAAA,uBACAC,MAAA,EACAC,WAAA,EACAC,UAAAC,EAAAZ,EAAA,uBAEAa,UACAR,KAAAC,OACAC,SAAA,6BACAE,MAAA,EACAK,UAAA,KAIAZ,EAAAa,SACAC,aAAAC,GACA,IAAAA,EACA,UAAAC,MAAA,4BAEA,OAAAC,EAAAnB,EAAAoB,KAAAH,EAAA,KAEAD,gBAAAH,GACA,OAAAM,EAAAnB,EAAAqB,QAAAR,EAAAS,KAAAT,YAIAX,EAAAqB,IAAA,OAAAC,eAAAC,GACAH,KAAAT,eAAAS,KAAAI,aAAAJ,KAAAT,UACAY,MAGA1B,EAAAC,EAAA2B,MAAA,OAAAzB,GAAA,oCClCA,MAAA0B,EAAA7B,EAAAC,EAAA2B,MAAA,QAEAE,EAAA7B,EAAA8B,IAAA,IAAAC,EAAA/B,GAAgCgC,cAAA,SAAyBR,MAAApB,EAAAS,EAAAoB,KACzD,IACA,MAAAC,QAAAN,EAAAO,SAAqC/B,UACrC,OASA6B,EAAA,KATAC,UAIAA,EAAAE,gBAAAvB,IAKAqB,GARA,GASG,MAAAG,GACH,OAAAJ,EAAAI,OAIAR,EAAA7B,EAAAsC,cAAA,CAAAJ,EAAAD,MAAA,KAAAC,EAAAK,KACAV,EAAA7B,EAAAwC,gBAAAhB,MAAAe,EAAAN,KACA,IAEA,OAAAA,EAAA,WADAL,EAAAa,SAAAF,IAEG,MAAAF,GACH,OAAAJ,EAAAI,MC5BA,IAAAK,EAFAC,GAAA,iBAAAA,KAAAlC,OAAAmC,OAAA,kBCEA,MAAAC,EAAA,CAAAC,EAAAC,MACAD,OACAC,OACAC,UAAAC,MAAAC,YCiCA,MClCAC,EDkCA,MACA,IAAAC,EAEA,MAAAC,EAAA,cAxCArC,cACAM,KAAA6B,SAGAnC,QAAAuB,EAAA5D,EAAA2E,GACA,MAAApB,GAAkBK,KAAA5D,OAAA2E,QAElB,OADAhC,KAAA6B,MAAAI,KAAArB,GACAA,EAGAlB,WAAAuB,GACA,MAAAiB,EAAA1E,OAAA2E,UAAyCnC,KAAAoC,SAAgBnB,QAMzD,OAJAiB,IACAlC,KAAA6B,MAAA7B,KAAA6B,MAAAQ,OAAAzB,KAAAK,KAAAiB,EAAAjB,KAGAiB,EAGAxC,SAAAuB,GAAWA,EAAA5D,SACX,OAAA2C,KAAA6B,MAAAS,KAAA1B,KAAAK,QAAAL,EAAAvD,UAGAqC,YAAAsC,GAIA,OAHAhC,KAAA6B,MAAAQ,OAAAzB,KAAAoB,UACAO,IAAA3B,KAAAvD,MAKAqC,cAEA,UADA,IAAA8C,IAAAxC,KAAA6B,MAAAU,IAAA3B,KAAAoB,UAUA,OACAS,YAAA,KACAX,IACAA,EAAAC,KAEAD,KAVA,GClCAW,cAGAC,EAAAC,IACAA,EAAAC,KAAA,kBAA6BC,MAAAhB,EAAAiB,iBAoC7BC,EAAA,CAAAC,EAAAL,IAAAK,EAAAC,GAAA,wBAAAC,IACA,MAAAtC,EAAAiB,EAAAO,SAA8BnB,GAAA+B,EAAA/B,KAE9BL,GACA+B,EAAAQ,GAAAvC,EAAAoB,MAAAY,KAAA,qBFxCA,EAAApB,EAAA4B,EAAAC,MACA7B,OACA8B,qCAAwCF,KAAYC,IACpD3B,UAAAC,MAAAC,YEqCA2B,CAAA3C,EAAAvD,KAAA6F,EAAAE,SAAAF,EAAAG,cAgBA,IAAAG,EAAA,CAAAR,EAAAL,MACAc,SAtDA,EAAAT,EAAAL,IAAAK,EAAAC,GAAA,QAAAS,EAAAC,KACA,IAAAvC,EAAAsC,EAAArG,QAAA+D,EAAAsC,EAAA1B,MACA,OAAA2B,EAAA,oCAGA,MAAAtG,EAAAqG,EAAArG,KAAA8B,OACA6C,EAAA0B,EAAA1B,KAAA7C,OAAAyE,cACAhD,EAAAiB,EAAAO,SAA8B/E,SAE9B,OAAAuD,KAAAoB,SACA2B,EAAA,oBAGAX,EAAAa,KAAA7B,GACAH,EAAAiC,WAAAd,EAAA/B,IACAY,EAAAkC,QAAAf,EAAA/B,GAAA5D,EAAA2E,GACAW,EAAAQ,GAAAnB,GAAAY,KAAA,iBAAAf,EAAAmC,YAAAhC,IACAgB,EAAAJ,KAAA,aAAArB,EAAA,+BAA4ES,OAC5EgB,EAAAiB,UAAAd,GAAAnB,GAAAY,KAAA,aAAArB,EAAA,WAA2ElE,sBAE3EqF,EAAAC,GACAgB,OAiCAF,CAAAT,EAAAL,GACAuB,cA/BA,EAAAlB,EAAAL,IAAAK,EAAAC,GAAA,iBAAAkB,EAAAR,KACA,MAAA/C,EAAAiB,EAAAO,SAA8BnB,GAAA+B,EAAA/B,KAE9BL,GAAAQ,EAAA+C,EAAA1C,OACAkB,EAAAQ,GAAAvC,EAAAoB,MAAAY,KAAA,aAAArB,EAAAX,EAAAvD,KAAA8G,EAAA1C,OAEAkC,MAyBAO,CAAAlB,EAAAL,GACAI,wBAAAC,EAAAL,GACAyB,WAhBA,EAAApB,EAAAL,IAAAK,EAAAC,GAAA,kBACA,MAAArC,EAAAiB,EAAAiC,WAAAd,EAAA/B,IAEA0B,EAAAQ,GAAAvC,EAAAoB,MAAAY,KAAA,iBAAAf,EAAAmC,YAAApD,EAAAoB,OACAW,EAAAQ,GAAAvC,EAAAoB,MAAAY,KAAA,aAAArB,EAAA,WAAkEX,EAAAvD,kBAClEqF,EAAAC,KAWAyB,CAAApB,EAAAL,GACAG,YATAE,MAAAC,GAAA,eAAAoB,EAAAV,KACAA,GAAYd,MAAAhB,EAAAiB,kBAQZA,CAAAE,qDC/DAsB,GACAC,EAAA7F,EAAA8F,OAAAC,EAAA/F,EAAAmF,KAAAa,UAAA,iBACAC,EAAAjG,EAAAkG,OACAD,EAAAjG,EAAAmG,YAAyBC,UAAA,IACzBC,KAAWC,OAAA,iBACXzE,EAAA7B,EAAAuG,aACA1E,EAAA7B,EAAAwG,kBCZA,MAAAC,EAAAC,GAAA,CAAAC,EAAAC,EAAAnF,IAAAiF,EAAAC,EAAAC,EAAAnF,GAAAoF,MAAApF,GCGAqF,EAAA/G,EAAAC,EAAA2B,MAAA,QAsBA,IAAAoF,GACAC,UAAAP,EArBAjF,MAAAmF,EAAAC,KACA,MAAAxG,MAASA,EAAAS,YAAkB8F,EAAAM,KAC3B/E,EAAA,IAAA4E,GAAyB1G,QAAAS,aACzBqG,QAAAhF,EAAAiF,OACAP,EAAAQ,oBAA0BF,OAkB1BG,OAAAZ,EAfAjF,MAAAmF,EAAAC,KACA,MAAA1E,QAAA4E,EAAArE,SAAAkE,EAAAzE,KAAAK,IACAqE,EAAAQ,mBAAyBlF,OAczBoF,UAAAb,EAXA,CAAAE,EAAAC,KACAA,EAAAQ,sBAA4BT,EAAAY,eAW5BC,UAAAf,EARA,CAAAE,EAAAC,KACAA,EAAAQ,sBAA4BT,EAAAY,gBCjB5B,MAAAE,EAAA5B,EAAA7F,EAAA0H,SACAC,EAAA5H,EAAAC,EAAA2B,MAAA,QAEA8F,EAAAG,MAAA,KAAApG,MAAAmF,EAAAC,EAAAnF,EAAAc,KACA,IACA,IAAAxC,EAAAC,EAAA6H,MAAAC,SAAAC,QAAAxF,GACA,UAAArB,MAAA,mBAEA,MAAAgB,QAAAyF,EAAAlF,SAAAF,GACA,IAAAL,EACA,UAAAhB,MAAA,iBAEAyF,EAAAY,UAAArF,EACAT,IAEG,MAAAY,GACHZ,EAAAY,EAAAoD,YAIAgC,EAAAO,MAAA,KACAC,KAAAlB,EAAAC,WAEAS,EAAAO,MAAA,QACA9I,IAAAJ,OAAAoJ,EAAA,eAAApJ,GAAAiI,EAAAM,QACAc,IAAApB,EAAAO,WACAc,OAAArB,EAAAS,WC3BA,MAAAa,EAAAxC,EAAA7F,EAAA0H,SAEAW,EAAAnJ,IAAA,UAAAyH,EAAAC,KACAA,EAAAQ,KAAA,uBAEAiB,EAAAJ,KAAA,SAAApG,EAAA7B,EAAAsI,aAAA,SACAC,0BAAA,IACAC,gBAAA,YAEAH,EAAAvG,IAAA,QAAA2F,GAEAY,EAAAvG,IAAA,CAAAO,EAAAsE,EAAAC,EAAAnF,KACAmF,EAAA6B,OAAA,KAAArB,+BAAiD/E,EAAAoD,aAGjD,IAAAiD,EAAA,ECNA,MAAAC,EAAAC,QAAAC,IAAAC,MAAA,IACAC,EAAAlD,MACAmD,EAAAC,EAAAjJ,EAAAkJ,aAAAH,GACAI,EAAAC,IAAAJ,GACAlJ,IAAA+G,MAAAxE,GAAAgH,QAAAC,MAAA,0BAAAjH,EAAAoD,UAEAsD,EAAAQ,IAAA,qBACAR,EAAAjH,IAAA8D,GAEAuD,EAAA5E,GAAA,aAAAD,IACA+E,QAAAG,IAAA,sBACA1E,EAAAR,EAAA6E,KAGAJ,EAAAjH,IAAA,IAAA4G,GAEAM,EAAAS,OAAAd,EAAA,KACAU,QAAAG,8BAAwCb","file":"server.bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 13);\n","module.exports = require(\"mongoose\");","module.exports = require(\"passport\");","module.exports = require(\"express\");","module.exports = require(\"body-parser\");","module.exports = require(\"moment\");","module.exports = require(\"bcrypt\");","module.exports = require(\"connect-ensure-login\");","module.exports = require(\"express-session\");","module.exports = require(\"path\");","module.exports = require(\"passport-local\");","module.exports = require(\"validator/lib/isEmail\");","module.exports = require(\"socket.io\");","module.exports = require(\"http\");","import mongoose from 'mongoose';\n\nconst connect = () => mongoose.connect('mongodb://127.0.0.1:27017/node-chat-app');\n\nexport default connect;\n\n","import mongoose from 'mongoose';\nimport bcrypt from 'bcrypt';\nimport isEmail from 'validator/lib/isEmail';\n\nconst userSchema = new mongoose.Schema({\n  email: {\n    type: String,\n    required: 'You must supply a email',\n    unique: 'Email already exists',\n    trim: true,\n    lowercase: true,\n    validate: [isEmail, 'Email is not valid'],\n  },\n  password: {\n    type: String,\n    required: 'You must supply a password',\n    trim: true,\n    minlength: 5,\n  },\n});\n\nuserSchema.methods = {\n  hashPassword(plaintextPassword) {\n    if (!plaintextPassword) {\n      throw new Error('Password cannot be blank');\n    }\n    return bcrypt.hash(plaintextPassword, 12);\n  },\n  isValidPassword(password) {\n    return bcrypt.compare(password, this.password);\n  },\n};\n\nuserSchema.pre('save', async function preSaveUser(next) {\n  this.password = await this.hashPassword(this.password);\n  next();\n});\n\nexport default mongoose.model('User', userSchema);\n","import passport from 'passport';\nimport LocalStrategy from 'passport-local';\nimport mongoose from 'mongoose';\n\nconst User = mongoose.model('User');\n\npassport.use(new LocalStrategy({ usernameField: 'email' }, async (email, password, done) => {\n  try {\n    const user = await User.findOne({ email });\n    if (!user) {\n      return done(null, false);\n    }\n\n    const isValidPassword = await user.isValidPassword(password);\n    if (!isValidPassword) {\n      return done(null, false);\n    }\n\n    return done(null, user);\n  } catch (err) {\n    return done(err);\n  }\n}));\n\npassport.serializeUser((user, done) => done(null, user.id));\npassport.deserializeUser(async (id, done) => {\n  try {\n    const user = await User.findById(id);\n    return done(null, user);\n  } catch (err) {\n    return done(err);\n  }\n});\n","const isRealString = string => typeof string === 'string' && string.trim().length > 0;\n\nexport default isRealString;\n","import moment from 'moment';\n\nexport const generateMessage = (from, text) => ({\n  from,\n  text,\n  createdAt: moment().valueOf(),\n});\n\nexport const generateLocationMessage = (from, latitude, longitude) => ({\n  from,\n  url: `https://www.google.com/maps?q=${latitude},${longitude}`,\n  createdAt: moment().valueOf(),\n});\n","class Users {\n  constructor() {\n    this.users = [];\n  }\n\n  addUser(id, name, room) {\n    const user = { id, name, room };\n    this.users.push(user);\n    return user;\n  }\n\n  removeUser(id) {\n    const userToRemove = Object.assign({}, this.getUser({ id }));\n\n    if (userToRemove) {\n      this.users = this.users.filter(user => user.id !== userToRemove.id);\n    }\n\n    return userToRemove;\n  }\n\n  getUser({ id, name }) {\n    return this.users.find(user => user.id === id || user.name === name);\n  }\n\n  getUserList(room) {\n    const users = this.users.filter(user => user.room === room);\n    const namesArray = users.map(user => user.name);\n\n    return namesArray;\n  }\n\n  getRoomList() {\n    const rooms = new Set(this.users.map(user => user.room));\n    return [...rooms];\n  }\n}\n\nconst Singleton = (() => {\n  let instance;\n\n  const createInstance = () => new Users();\n\n  return {\n    getInstance() {\n      if (!instance) {\n        instance = createInstance();\n      }\n      return instance;\n    },\n  };\n})();\n\nexport { Singleton as default, Users };\n","import isRealString from './utils/validation';\nimport { generateMessage, generateLocationMessage } from './utils/message';\nimport Users from './utils/users';\n\nconst users = Users.getInstance();\n\n// update room list for people joining a room\nconst updateUserJoining = (io) => {\n  io.emit('updateRoomList', { rooms: users.getRoomList() });\n};\n\nconst joinRoom = (socket, io) => socket.on('join', (params, callback) => {\n  if (!isRealString(params.name) || !isRealString(params.room)) {\n    return callback('Name and Room name are required!');\n  }\n\n  const name = params.name.trim();\n  const room = params.room.trim().toLowerCase();\n  const user = users.getUser({ name });\n\n  if (user && user.room === room) {\n    return callback('Username taken!');\n  }\n\n  socket.join(room);\n  users.removeUser(socket.id);\n  users.addUser(socket.id, name, room);\n  io.to(room).emit('updateUserList', users.getUserList(room));\n  socket.emit('newMessage', generateMessage('Admin', `Welcome to the room ${room}!`));\n  socket.broadcast.to(room).emit('newMessage', generateMessage('Admin', `${name} joined the chat`));\n\n  updateUserJoining(io);\n  return callback();\n});\n\nconst createMessage = (socket, io) => socket.on('createMessage', (message, callback) => {\n  const user = users.getUser({ id: socket.id });\n\n  if (user && isRealString(message.text)) {\n    io.to(user.room).emit('newMessage', generateMessage(user.name, message.text));\n  }\n  callback();\n});\n\nconst createLocationMessage = (socket, io) => socket.on('createLocationMessage', (coords) => {\n  const user = users.getUser({ id: socket.id });\n\n  if (user) {\n    io.to(user.room).emit('newLocationMessage', generateLocationMessage(user.name, coords.latitude, coords.longitude));\n  }\n});\n\nconst disconnect = (socket, io) => socket.on('disconnect', () => {\n  const user = users.removeUser(socket.id);\n\n  io.to(user.room).emit('updateUserList', users.getUserList(user.room));\n  io.to(user.room).emit('newMessage', generateMessage('Admin', `${user.name} has left`));\n  updateUserJoining(io);\n});\n\nconst getRoomList = socket => socket.on('getRoomList', (_, callback) => {\n  callback({ rooms: users.getRoomList() });\n});\n\nexport default (socket, io) => ({\n  joinRoom: joinRoom(socket, io),\n  createMessage: createMessage(socket, io),\n  createLocationMessage: createLocationMessage(socket, io),\n  disconnect: disconnect(socket, io),\n  getRoomList: getRoomList(socket, io),\n});\n","import express from 'express';\nimport path from 'path';\nimport bodyParser from 'body-parser';\nimport passport from 'passport';\nimport session from 'express-session';\n\nexport default [\n  express.static(path.join(__dirname, '../../public')),\n  bodyParser.json(),\n  bodyParser.urlencoded({ extended: true }),\n  session({ secret: 'keyboard cat' }),\n  passport.initialize(),\n  passport.session(),\n];\n","export const catchAsyncError = fn => (req, res, next) => fn(req, res, next).catch(next);\n","import mongoose from 'mongoose';\nimport { catchAsyncError } from '../utils/helpers';\n\nconst User = mongoose.model('User');\n\nconst createOne = async (req, res) => {\n  const { email, password } = req.body;\n  const user = new User({ email, password });\n  const newUser = await user.save();\n  res.send(`create user ${newUser}`);\n};\n\nconst getOne = async (req, res) => {\n  const user = await User.findById(req.user.id);\n  res.send(`get user\\n ${user}`);\n};\n\nconst updateOne = (req, res) => {\n  res.send(`update user\\n ${req.docFromId}`);\n};\n\nconst deleteOne = (req, res) => {\n  res.send(`delete user\\n ${req.docFromId}`);\n};\n\nexport default {\n  createOne: catchAsyncError(createOne),\n  getOne: catchAsyncError(getOne),\n  updateOne: catchAsyncError(updateOne),\n  deleteOne: catchAsyncError(deleteOne),\n};\n","import express from 'express';\nimport { ensureLoggedIn } from 'connect-ensure-login';\nimport mongoose from 'mongoose';\nimport userController from '../controllers/user.controller';\n\nexport const userRouter = express.Router();\nconst User = mongoose.model('User');\n\nuserRouter.param('id', async (req, res, next, id) => {\n  try {\n    if (!mongoose.Types.ObjectId.isValid(id)) {\n      throw new Error('Invalid user id');\n    }\n    const user = await User.findById(id);\n    if (!user) {\n      throw new Error('No user found');\n    } else {\n      req.docFromId = user;\n      next();\n    }\n  } catch (err) {\n    next(err.message);\n  }\n});\n\nuserRouter.route('/')\n  .post(userController.createOne);\n\nuserRouter.route('/:id')\n  .get(ensureLoggedIn(), userController.getOne)\n  .put(userController.updateOne)\n  .delete(userController.deleteOne);\n","import express from 'express';\nimport passport from 'passport';\nimport { userRouter } from './user.router';\n\nconst routes = express.Router();\n\nroutes.get('/login', (req, res) => {\n  res.send('<p>login form</p>');\n});\nroutes.post('/login', passport.authenticate('local', {\n  successReturnToOrRedirect: '/',\n  failureRedirect: '/login',\n}));\nroutes.use('/user', userRouter);\n\nroutes.use((err, req, res, next) => { // eslint-disable-line no-unused-vars\n  res.status(500).send(`Something messed up... ${err.message}`);\n});\n\nexport default routes;\n","/* eslint-disable no-console */\n\nimport express from 'express';\nimport http from 'http';\nimport socketIO from 'socket.io';\n\nimport connect from './db';\nimport './models';\nimport './passport';\nimport genSocketEvents from './socketEvent';\nimport globalMiddleware from './middleware';\nimport routes from './routes';\n\nconst port = process.env.PORT || 3000;\nconst app = express();\nconst server = http.createServer(app);\nconst io = socketIO(server);\nconnect().catch(err => console.error('Could not connect to DB', err.message));\n\napp.set('view engine', 'hbs');\napp.use(globalMiddleware);\n\nio.on('connection', (socket) => {\n  console.log('New user connected');\n  genSocketEvents(socket, io);\n});\n\napp.use('/', routes);\n\nserver.listen(port, () => {\n  console.log(`Server started on port ${port}`);\n});\n"],"sourceRoot":""}