!function(e){var t={};function r(s){if(t[s])return t[s].exports;var o=t[s]={i:s,l:!1,exports:{}};return e[s].call(o.exports,o,o.exports,r),o.l=!0,o.exports}r.m=e,r.c=t,r.d=function(e,t,s){r.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:s})},r.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=13)}([function(e,t){e.exports=require("mongoose")},function(e,t){e.exports=require("passport")},function(e,t){e.exports=require("express")},function(e,t){e.exports=require("body-parser")},function(e,t){e.exports=require("moment")},function(e,t){e.exports=require("bcrypt")},function(e,t){e.exports=require("connect-ensure-login")},function(e,t){e.exports=require("express-session")},function(e,t){e.exports=require("path")},function(e,t){e.exports=require("passport-local")},function(e,t){e.exports=require("validator/lib/isEmail")},function(e,t){e.exports=require("socket.io")},function(e,t){e.exports=require("http")},function(e,t,r){"use strict";r.r(t);var s=r(2),o=r.n(s),n=r(12),a=r.n(n),i=r(11),c=r.n(i),u=r(0),d=r.n(u);var m=()=>d.a.connect("mongodb://127.0.0.1:27017/node-chat-app"),l=r(5),p=r.n(l),g=r(10),f=r.n(g);const h=new d.a.Schema({email:{type:String,required:"You must supply a email",unique:"Email already exists",trim:!0,lowercase:!0,validate:[f.a,"Email is not valid"]},password:{type:String,required:"You must supply a password",trim:!0,minlength:5}});h.methods={hashPassword(e){if(!e)throw new Error("Password cannot be blank");return p.a.hash(e,12)},isValidPassword(e){return p.a.compare(e,this.password)}},h.pre("save",async function(e){this.password=await this.hashPassword(this.password),e()});d.a.model("User",h);var w=r(1),y=r.n(w),v=r(9),x=r.n(v);const U=d.a.model("User");y.a.use(new x.a({usernameField:"email"},async(e,t,r)=>{try{const s=await U.findOne({email:e});return r(null,s?!!await s.isValidPassword(t)&&s:!1)}catch(e){return r(e)}})),y.a.serializeUser((e,t)=>t(null,e.id)),y.a.deserializeUser(async(e,t)=>{try{return t(null,await U.findById(e))}catch(e){return t(e)}});var O=e=>"string"==typeof e&&e.trim().length>0,b=r(4),q=r.n(b);const L=(e,t)=>({from:e,text:t,createdAt:q()().valueOf()});const R=(()=>{let e;const t=()=>new class{constructor(){this.users=[]}addUser(e,t,r){const s={id:e,name:t,room:r};return this.users.push(s),s}removeUser(e){const t=Object.assign({},this.getUser({id:e}));return t&&(this.users=this.users.filter(e=>e.id!==t.id)),t}getUser({id:e,name:t}){return this.users.find(r=>r.id===e||r.name===t)}getUserList(e){return this.users.filter(t=>t.room===e).map(e=>e.name)}getRoomList(){return[...new Set(this.users.map(e=>e.room))]}};return{getInstance:()=>(e||(e=t()),e)}})().getInstance(),j=e=>{e.emit("updateRoomList",{rooms:R.getRoomList()})},I=(e,t)=>e.on("createLocationMessage",r=>{const s=R.getUser({id:e.id});s&&t.to(s.room).emit("newLocationMessage",((e,t,r)=>({from:e,url:`https://www.google.com/maps?q=${t},${r}`,createdAt:q()().valueOf()}))(s.name,r.latitude,r.longitude))});var M=(e,t)=>({joinRoom:((e,t)=>e.on("join",(r,s)=>{if(!O(r.name)||!O(r.room))return s("Name and Room name are required!");const o=r.name.trim(),n=r.room.trim().toLowerCase(),a=R.getUser({name:o});return a&&a.room===n?s("Username taken!"):(e.join(n),R.removeUser(e.id),R.addUser(e.id,o,n),t.to(n).emit("updateUserList",R.getUserList(n)),e.emit("newMessage",L("Admin",`Welcome to the room ${n}!`)),e.broadcast.to(n).emit("newMessage",L("Admin",`${o} joined the chat`)),j(t),s())}))(e,t),createMessage:((e,t)=>e.on("createMessage",(r,s)=>{const o=R.getUser({id:e.id});o&&O(r.text)&&t.to(o.room).emit("newMessage",L(o.name,r.text)),s()}))(e,t),createLocationMessage:I(e,t),disconnect:((e,t)=>e.on("disconnect",()=>{const r=R.removeUser(e.id);t.to(r.room).emit("updateUserList",R.getUserList(r.room)),t.to(r.room).emit("newMessage",L("Admin",`${r.name} has left`)),j(t)}))(e,t),getRoomList:(e=>e.on("getRoomList",(e,t)=>{t({rooms:R.getRoomList()})}))(e)}),$=r(8),P=r.n($),S=r(3),E=r.n(S),_=r(7),A=r.n(_),k=[o.a.static(P.a.join(__dirname,"../../public")),E.a.json(),E.a.urlencoded({extended:!0}),A()({secret:"keyboard cat"}),y.a.initialize(),y.a.session()],B=r(6);const F=e=>(t,r,s)=>e(t,r,s).catch(s),z=d.a.model("User");var N={createOne:F(async(e,t)=>{const{email:r,password:s}=e.body,o=new z({email:r,password:s}),n=await o.save();t.send(`create user ${n}`)}),getOne:F(async(e,t)=>{const r=await z.findById(e.user.id);t.send(`get user\n ${r}`)}),updateOne:F((e,t)=>{t.send(`update user\n ${e.docFromId}`)}),deleteOne:F((e,t)=>{t.send(`delete user\n ${e.docFromId}`)})};const T=o.a.Router(),V=d.a.model("User");T.param("id",async(e,t,r,s)=>{try{if(!d.a.Types.ObjectId.isValid(s))throw new Error("Invalid user id");const t=await V.findById(s);if(!t)throw new Error("No user found");e.docFromId=t,r()}catch(e){r(e.message)}}),T.route("/").post(N.createOne),T.route("/:id").get(Object(B.ensureLoggedIn)(),N.getOne).put(N.updateOne).delete(N.deleteOne);const C=o.a.Router();C.get("/login",(e,t)=>{t.send("<p>login form</p>")}),C.post("/login",y.a.authenticate("local",{successReturnToOrRedirect:"/",failureRedirect:"/login"})),C.use("/user",T),C.use((e,t,r,s)=>{r.status(500).send(`Something messed up... ${e.message}`)});var Y=C;const D=process.env.PORT||3e3,W=o()(),G=a.a.createServer(W),H=c()(G);m().catch(e=>console.error("Could not connect to DB",e.message)),W.set("view engine","hbs"),W.use(k),H.on("connection",e=>{console.log("New user connected"),M(e,H)}),W.use("/",Y),G.listen(D,()=>{console.log(`Server started on port ${D}`)})}]);
//# sourceMappingURL=server.bundle.js.map